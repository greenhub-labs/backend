# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserFarmMembershipDto {
  farmId: String!
  farmName: String!
  role: String!
}

type UserDetailsResponseDto {
  id: String!
  firstName: String
  lastName: String
  avatar: String
  bio: String
  isActive: Boolean!
  isDeleted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  farms: [UserFarmMembershipDto!]
  email: String
  phone: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AuthPayload {
  """JWT access token for API authentication"""
  accessToken: String!

  """JWT refresh token for obtaining new access tokens"""
  refreshToken: String!

  """User information"""
  user: UserDetailsResponseDto!
}

type TokenVerificationResult {
  """Whether the token is valid"""
  valid: Boolean!

  """Whether the token is expired"""
  expired: Boolean

  """User ID extracted from token"""
  userId: String

  """Email extracted from token"""
  email: String
}

type FarmMemberResponseDto {
  id: String!
  firstName: String
  lastName: String
  avatar: String
  bio: String
  phone: String
  email: String
  isActive: Boolean!
  isDeleted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  """Role of the user in this farm"""
  role: String!
}

type FarmResponseDto {
  id: String!
  name: String!
  description: String
  country: String
  state: String
  city: String
  postalCode: String
  street: String
  latitude: Float
  longitude: Float
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  """Members (users) assigned to this farm"""
  members: [FarmMemberResponseDto!]
}

type Query {
  """Get current authenticated user information (user + auth info)"""
  me: UserDetailsResponseDto!

  """Verify JWT token validity and decode payload"""
  verifyToken(token: String!): TokenVerificationResult!

  """Get user information by ID (requires authentication)"""
  getUserById(input: GetUserByIdRequestDto!): UserDetailsResponseDto!

  """Get farm information by ID (requires authentication)"""
  getFarmById(input: GetFarmByIdRequestDto!): FarmResponseDto!

  """Get all farms (requires authentication)"""
  getAllFarms: [FarmResponseDto!]!
}

input GetUserByIdRequestDto {
  id: String!
}

input GetFarmByIdRequestDto {
  id: String!
}

type Mutation {
  """Register a new user account"""
  register(input: RegisterInput!): AuthPayload!

  """Authenticate user with email and password"""
  login(input: LoginInput!): AuthPayload!

  """Logout current user and record logout event"""
  logout: Boolean!

  """Refresh access token using a valid refresh token"""
  refreshToken(refreshToken: String!): AuthPayload!

  """
  Create a new user (Admin only - regular registration uses auth/register)
  """
  createUser(input: CreateUserRequestDto!): UserDetailsResponseDto!

  """Update user profile (users can only update their own profile)"""
  updateUser(input: UpdateUserRequestDto!): UserDetailsResponseDto!

  """Delete user account (users can only delete their own account)"""
  deleteUser(input: DeleteUserRequestDto!): UserDetailsResponseDto!

  """Restore a soft-deleted user (Admin only)"""
  restoreUser(input: RestoreUserRequestDto!): UserDetailsResponseDto!

  """Create a new farm"""
  createFarm(input: CreateFarmRequestDto!): FarmResponseDto!

  """Update an existing farm"""
  updateFarm(input: UpdateFarmRequestDto!): FarmResponseDto!

  """Delete a farm by ID"""
  deleteFarm(input: DeleteFarmRequestDto!): Boolean!

  """Assign a user to a farm"""
  assignUserToFarm(input: AssignUserToFarmRequestDto!): FarmResponseDto!
}

input RegisterInput {
  """User email address"""
  email: String!

  """User password"""
  password: String!

  """User first name"""
  firstName: String

  """User last name"""
  lastName: String

  """User phone number"""
  phone: String
}

input LoginInput {
  """User email address"""
  email: String!

  """User password"""
  password: String!
}

input CreateUserRequestDto {
  firstName: String!
  lastName: String
  avatar: String
  bio: String
}

input UpdateUserRequestDto {
  id: String!
  firstName: String
  lastName: String
  avatar: String
  bio: String
}

input DeleteUserRequestDto {
  id: String!
}

input RestoreUserRequestDto {
  id: String!
}

input CreateFarmRequestDto {
  name: String!
  description: String
  country: String
  state: String
  city: String
  postalCode: String
  street: String
  latitude: Float
  longitude: Float
  userId: String!
}

input UpdateFarmRequestDto {
  id: String!
  name: String
  description: String
  country: String
  state: String
  city: String
  postalCode: String
  street: String
  latitude: Float
  longitude: Float
  isActive: Boolean
}

input DeleteFarmRequestDto {
  id: String!
}

input AssignUserToFarmRequestDto {
  farmId: String!
  userId: String!
  role: String!
}