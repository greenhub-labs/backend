/**
 * ===================================================================
 * üåø GREENHUB LABS - PRISMA SCHEMA
 * ===================================================================
 * 
 * Sistema de automatizaci√≥n agr√≠cola inteligente con arquitectura multitenant.
 * Gestiona huertos, gallineros, sistemas IoT, riego autom√°tico, energ√≠a solar
 * y an√°lisis predictivo mediante IA.
 * 
 * @version 1.0.0
 * @author GreenHub Labs Team
 * @description Base de datos para plataforma de agricultura inteligente
 * 
 * ARQUITECTURA:
 * - Multitenant: M√∫ltiples farms por usuario
 * - IoT Ready: Nodos distribuidos con sensores
 * - AI Integration: Predicciones y automatizaci√≥n
 * - Energy Management: Solar + Battery monitoring
 * 
 * ===================================================================
 */

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// üè∑Ô∏è ENUMS & TYPE DEFINITIONS
// ================================

/// Roles de usuario dentro de una farm
/// Define los niveles de acceso y permisos
enum Roles {
  SYSTEM        /// Administrador del sistema: acceso total, puede gestionar todos los recursos.
  OWNER         /// Propietario: acceso total, puede eliminar farm, usuarios, etc.
  ADMINISTRATOR /// Administrador: gesti√≥n completa excepto eliminaci√≥n
  MANAGER       /// Gestor: control operativo de cultivos y sistemas, puede eliminar farm, usuarios, etc.
  VIEWER        /// Observador: solo lectura de datos y reportes
  GUEST         /// Invitado: acceso limitado a informaci√≥n b√°sica
}

/// Estado actual de un bancal/plot
enum PlotStatus {
  ACTIVE    /// En uso activo con cultivos
  INACTIVE  /// Temporalmente fuera de uso
  PREPARING /// En preparaci√≥n para nueva siembra
  RESTING   /// En barbecho para recuperaci√≥n del suelo
}

/// Estado del ciclo de vida de un cultivo
enum CropStatus {
  PLANNED    /// Planificado pero no plantado
  PLANTED    /// Reci√©n plantado o sembrado
  GROWING    /// En crecimiento vegetativo
  FLOWERING  /// En floraci√≥n
  FRUITING   /// Produciendo frutos
  HARVESTING /// En proceso de cosecha
  FINISHED   /// Ciclo completado
}

/// Categor√≠a del tipo de cultivo
enum CropType {
  VEGETABLE /// Hortalizas (tomate, lechuga, etc.)
  FRUIT     /// Frutales (manzanas, fresas, etc.)
  HERB      /// Hierbas arom√°ticas y medicinales
  GRAIN     /// Cereales (trigo, avena, etc.)
  LEGUME    /// Leguminosas (jud√≠as, garbanzos, etc.)
  ROOT      /// Tub√©rculos (patatas, zanahorias, etc.)
  FLOWER    /// Plantas ornamentales
}

/// Estaciones del a√±o para planificaci√≥n
enum Season {
  SPRING /// Primavera: marzo-mayo
  SUMMER /// Verano: junio-agosto
  AUTUMN /// Oto√±o: septiembre-noviembre
  WINTER /// Invierno: diciembre-febrero
}

/// M√©todo de plantaci√≥n utilizado
enum PlantingMethod {
  DIRECT_SEED /// Siembra directa en el suelo
  TRANSPLANT  /// Trasplante desde semillero
  CUTTING     /// Propagaci√≥n por esqueje
  BULB        /// Plantaci√≥n de bulbos
}

/// Tipos de sensores IoT disponibles
enum SensorType {
  SOIL_MOISTURE    /// Humedad del suelo (%)
  TEMPERATURE      /// Temperatura ambiente (¬∞C)
  HUMIDITY         /// Humedad relativa del aire (%)
  PH              /// Acidez del suelo (0-14)
  LIGHT           /// Luminosidad ambiental (lux)
  PRESSURE        /// Presi√≥n atmosf√©rica (hPa)
  CO2             /// Concentraci√≥n de CO2 (ppm)
  NH3             /// Concentraci√≥n de amon√≠aco (ppm)
  WATER_FLOW      /// Flujo de agua (l/min)
  WATER_PRESSURE  /// Presi√≥n del agua (bar)
  BATTERY_LEVEL   /// Nivel de bater√≠a (%)
  SOLAR_GENERATION /// Generaci√≥n solar (W)
}

/// Estado del sistema de riego
enum IrrigationStatus {
  INACTIVE  /// Sistema apagado
  ACTIVE    /// Regando actualmente
  SCHEDULED /// Programado para regar
  MANUAL    /// Control manual activo
  ERROR     /// Error en el sistema
}

/// Estado de las v√°lvulas de riego
enum ValveStatus {
  OPEN    /// V√°lvula abierta (agua fluyendo)
  CLOSED  /// V√°lvula cerrada
  PARTIAL /// Parcialmente abierta
  ERROR   /// Error en la v√°lvula
}

/// Nivel de severidad de alertas
enum AlertLevel {
  INFO     /// Informaci√≥n general
  WARNING  /// Advertencia que requiere atenci√≥n
  CRITICAL /// Cr√≠tico, requiere acci√≥n inmediata
  ERROR    /// Error del sistema
}

/// Unidades de medida espec√≠ficas para dimensiones
enum UnitMeasurement {
  // Unidades m√©tricas
  METERS       /// Metros (m)
  CENTIMETERS  /// Cent√≠metros (cm)
  KILOMETERS   /// Kil√≥metros (km)
  MILLIMETERS  /// Mil√≠metros (mm)
  
  // Unidades imperiales
  FEET         /// Pies (ft)
  INCHES       /// Pulgadas (in)
  YARDS        /// Yardas (yd)
  MILES        /// Millas (mi)
}

/// Tipos de alertas del sistema
enum AlertType {
  SENSOR_FAILURE        /// Fallo de sensor IoT
  LOW_BATTERY          /// Bater√≠a baja en nodo
  IRRIGATION_ISSUE     /// Problema en sistema de riego
  WEATHER_ALERT        /// Alerta meteorol√≥gica
  SECURITY_BREACH      /// Brecha de seguridad
  SYSTEM_ERROR         /// Error general del sistema
  MAINTENANCE_REQUIRED /// Mantenimiento requerido
}

/// Canales de notificaci√≥n disponibles
enum NotificationChannel {
  EMAIL    /// Correo electr√≥nico
  SMS      /// Mensaje de texto
  PUSH     /// Notificaci√≥n push m√≥vil
  TELEGRAM /// Bot de Telegram
  SLACK    /// Canal de Slack
  DISCORD  /// Canal de Discord
}

/// Razas de gallinas comunes
enum ChickenBreed {
  LEGHORN          /// Leghorn (alta producci√≥n de huevos)
  RHODE_ISLAND_RED /// Rhode Island Red (doble prop√≥sito)
  PLYMOUTH_ROCK    /// Plymouth Rock (raza d√≥cil)
  SUSSEX           /// Sussex (buena ponedora)
  ORPINGTON        /// Orpington (raza ornamental)
  AUSTRALORP       /// Australorp (excelente ponedora)
  MARANS           /// Marans (huevos oscuros)
  BANTAM           /// Bantam (raza miniatura)
  OTHER            /// Otra raza no especificada
}

/// Estado de salud de las gallinas
enum ChickenStatus {
  HEALTHY    /// Saludable y activa
  SICK       /// Enferma, requiere atenci√≥n
  QUARANTINE /// En cuarentena por enfermedad
  BROODING   /// Empollando huevos
  MOLTING    /// En proceso de muda
  RETIRED    /// Retirada de producci√≥n
  DECEASED   /// Fallecida
}

/// Calidad de los huevos recolectados
enum EggQuality {
  EXCELLENT /// Excelente calidad para venta
  GOOD      /// Buena calidad para consumo
  FAIR      /// Calidad aceptable
  POOR      /// Baja calidad
  CRACKED   /// Huevo agrietado
  DIRTY     /// Huevo sucio
}

/// Estado de las puertas autom√°ticas del gallinero
enum DoorStatus {
  OPEN    /// Puerta abierta
  CLOSED  /// Puerta cerrada
  OPENING /// Abri√©ndose
  CLOSING /// Cerr√°ndose
  ERROR   /// Error en mecanismo
}

/// Modo de operaci√≥n de la automatizaci√≥n
enum AutomationMode {
  MANUAL        /// Control manual exclusivo
  SCHEDULED     /// Basado en horarios programados
  SENSOR_BASED  /// Basado en lecturas de sensores
  AI_CONTROLLED /// Controlado por IA predictiva
}

/// Condiciones meteorol√≥gicas
enum WeatherCondition {
  SUNNY  /// Soleado
  CLOUDY /// Nublado
  RAINY  /// Lluvioso
  STORMY /// Tormenta
  SNOWY  /// Nevando
  FOGGY  /// Niebla
  WINDY  /// Ventoso
}

/// Fuente de energ√≠a del sistema
enum EnergySource {
  SOLAR   /// Energ√≠a solar exclusiva
  BATTERY /// Bater√≠a solamente
  GRID    /// Red el√©ctrica
  HYBRID  /// Sistema h√≠brido (solar + red)
}

/// Estado del sistema IoT
enum SystemStatus {
  ONLINE      /// En l√≠nea y operativo
  OFFLINE     /// Fuera de l√≠nea
  MAINTENANCE /// En mantenimiento
  ERROR       /// Error en el sistema
}

enum SoilType {
  SANDY      /// Sandy soil - Loose texture, drains quickly, low fertility
  CLAY       /// Clay soil - Heavy, retains water well, fertile but hard to work
  SILTY      /// Silty soil - Smooth texture, good water retention, easily compacted
  LOAM       /// Loam soil - Balanced mix of sand, silt and clay, ideal for most crops
  CALCAREOUS /// Calcareous soil - Rich in limestone, alkaline, can limit nutrient uptake
  PEAT       /// Peat soil - High in organic matter, very fertile, wet and acidic
  SALINE     /// Saline soil - Contains excess soluble salts, can affect plant growth
  VOLCANIC   /// Volcanic soil (Andosol) - Very fertile, high mineral content, excellent for high-value crops
}

// ================================
// üë• USER MANAGEMENT & MULTI-TENANT
// ================================

/**
 * Usuario del sistema
 * 
 * Representa a una persona que puede acceder al sistema y pertenecer
 * a m√∫ltiples farms con diferentes roles. El sistema es multitenant,
 * permitiendo que un usuario gestione varios huertos/granjas.
 */
model User {
  /// UUID √∫nico del usuario
  id        String   @id @default(uuid())
  /// Nombre de pila
  firstName String?
  /// Apellidos
  lastName  String?
  /// Biograf√≠a o descripci√≥n personal
  bio       String?
  /// URL del avatar/foto de perfil
  avatar    String?
  /// Si el usuario est√° activo en el sistema
  isActive  Boolean  @default(true)
  /// Soft delete: usuario eliminado l√≥gicamente
  isDeleted Boolean  @default(false)
  /// Fecha de creaci√≥n del registro
  createdAt DateTime @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt DateTime @updatedAt
  /// Fecha de eliminaci√≥n del registro
  deletedAt DateTime?
  
  // Relations
  /// Datos de autenticaci√≥n del usuario
  auth            Auth?
  /// Membres√≠as a farms (un usuario puede estar en m√∫ltiples farms)
  farmMemberships FarmMembership[]
  /// Logs de riego realizados por el usuario
  irrigationLogs  IrrigationLog[]
  /// Registros de cosechas realizadas
  harvestLogs     HarvestLog[]
  /// Registros de siembras realizadas
  plantingLogs    PlantingLog[]
  /// Logs de mantenimiento realizados
  maintenanceLogs MaintenanceLog[]
  /// Notificaciones recibidas
  notifications   Notification[]
  /// Interacciones con el asistente IA
  aiInteractions  AIInteraction[]
  /// Alertas creadas por el usuario
  createdAlerts   Alert[]       @relation("AlertCreatedBy")
  /// Alertas asignadas al usuario
  assignedAlerts  Alert[]       @relation("AlertAssignedTo")
  
  @@map("users")
}

/**
 * Datos de autenticaci√≥n del usuario
 * 
 * Almacena credenciales y informaci√≥n de sesi√≥n.
 * Separado del modelo User para mayor seguridad.
 */
model Auth {
  /// UUID √∫nico del registro de autenticaci√≥n
  id         String    @id @default(uuid())
  /// Referencia al usuario (relaci√≥n 1:1)
  userId     String    @unique
  /// Email √∫nico para login
  email      String    @unique
  /// Tel√©fono opcional para 2FA
  phone      String?   @unique
  /// Hash de la contrase√±a (bcrypt)
  password   String?
  /// Si el email ha sido verificado
  isVerified Boolean   @default(false)
  /// √öltimo inicio de sesi√≥n
  lastLogin  DateTime?
  /// Fecha de creaci√≥n
  createdAt  DateTime  @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt  DateTime  @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt  DateTime?
  
  // Relations
  /// Usuario asociado
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("auth")
}

/**
 * Farm/Granja - Entidad principal multitenant
 * 
 * Representa un huerto, granja o explotaci√≥n agr√≠cola.
 * Todos los recursos (plots, sensores, etc.) pertenecen a una farm.
 * Un usuario puede pertenecer a m√∫ltiples farms.
 */
model Farm {
  /// UUID √∫nico de la farm
  id          String   @id @default(uuid())
  /// Nombre de la farm
  name        String
  /// Descripci√≥n opcional
  description String?
  /// Pais de la farm
  country     String?
  /// Estado o provincia de la farm
  state       String?
  /// Ciudad de la farm
  city        String?
  /// C√≥digo postal de la farm
  postalCode  String?
  /// Direcci√≥n completa estructurada
  street      String?
  /// Coordenadas GPS
  latitude    Float?
  longitude   Float?
  /// Si la farm est√° activa
  isActive    Boolean  @default(true)
  /// Fecha de creaci√≥n
  createdAt   DateTime @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt   DateTime @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt   DateTime?
  
  // Relations
  /// Usuarios miembros de la farm
  memberships     FarmMembership[]
  /// Bancales/parcelas de cultivo
  plots           Plot[]
  /// Gallineros de la farm
  coops           Coop[]
  /// Nodos IoT instalados
  iotNodes        IoTNode[]
  /// Zonas de riego configuradas
  irrigationZones IrrigationZone[]
  /// Datos meteorol√≥gicos locales
  weatherData     WeatherData[]
  /// Paneles solares instalados
  solarPanels     SolarPanel[]
  /// Bater√≠as del sistema
  batteries       Battery[]
  /// Alertas generadas en la farm
  alerts          Alert[]
  /// Configuraciones del sistema
  configurations  FarmConfiguration[]
  
  @@map("farms")
}

/**
 * Roles del sistema
 * 
 * Define los diferentes niveles de acceso y permisos
 * que puede tener un usuario dentro de una farm.
 */
model Role {
  /// UUID √∫nico del rol
  id          String   @id @default(uuid())
  /// Nombre del rol (del enum Roles)
  name        Roles    @unique
  /// Descripci√≥n del rol y sus permisos
  description String?
  /// Fecha de creaci√≥n
  createdAt   DateTime @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt   DateTime @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt   DateTime?
  
  // Relations
  /// Membres√≠as que usan este rol
  farmMemberships FarmMembership[]
  
  @@map("roles")
}

/**
 * Membres√≠a de usuario a farm
 * 
 * Tabla de relaci√≥n many-to-many entre User y Farm,
 * con informaci√≥n adicional como el rol del usuario en esa farm.
 * Un usuario puede ser OWNER de una farm y VIEWER de otra.
 */
model FarmMembership {
  /// UUID √∫nico de la membres√≠a
  id        String   @id @default(uuid())
  /// Referencia al usuario
  userId    String
  /// Referencia a la farm
  farmId    String
  /// Referencia al rol del usuario en esta farm
  roleId    String
  /// Si la membres√≠a est√° activa
  isActive  Boolean  @default(true)
  /// Fecha en que se uni√≥ a la farm
  joinedAt  DateTime @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt DateTime @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt DateTime?
  
  // Relations
  /// Usuario miembro
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// Farm a la que pertenece
  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)
  /// Rol en esta farm
  role Role @relation(fields: [roleId], references: [id])
  
  /// Un usuario solo puede tener una membres√≠a por farm
  @@unique([userId, farmId])
  @@map("farm_memberships")
}

// ================================
// üå± GARDEN MANAGEMENT
// ================================

/**
 * Bancal/Parcela de cultivo
 * 
 * Representa una zona f√≠sica delimitada donde se cultivan plantas.
 * Cada plot pertenece a una farm y puede tener m√∫ltiples cultivos
 * a lo largo del tiempo (rotaci√≥n de cultivos).
 */
model Plot {
  /// UUID √∫nico del bancal
  id          String     @id @default(uuid())
  /// Nombre descriptivo del bancal
  name        String
  /// Descripci√≥n adicional del bancal
  description String?
  /// Ancho en metros
  width       Float?
  /// Longitud en metros
  length      Float?
  /// Altura en metros
  height      Float?
  /// √Årea en metros cuadrados
  area        Float? 
  /// Per√≠metro en metros
  perimeter   Float?
  /// Volumen en metros c√∫bicos
  volume      Float?
  /// Unidad de medida espec√≠fica para las dimensiones
  unitMeasurement UnitMeasurement? @default(METERS)
  /// Estado actual del bancal
  status      PlotStatus @default(ACTIVE)
  /// Tipo de suelo (arcilloso, arenoso, etc.)
  soilType    SoilType? @default(LOAM)
  /// Nivel de pH del suelo (0-14)
  soilPh      Float?
  /// Farm a la que pertenece este bancal
  farmId      String
  /// Fecha de creaci√≥n
  createdAt   DateTime   @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt   DateTime   @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt   DateTime?
  
  // Relations
  /// Farm propietaria del bancal
  farm            Farm             @relation(fields: [farmId], references: [id])
  /// Cultivos plantados en este bancal
  crops           Crop[]
  /// Nodos IoT instalados en el bancal
  iotNodes        IoTNode[]
  /// Zonas de riego del bancal
  irrigationZones IrrigationZone[]
  /// Lecturas de sensores en el bancal
  sensorReadings  SensorReading[]
  
  @@map("plots")
}

/**
 * Variedad de cultivo
 * 
 * Cat√°logo de plantas y variedades disponibles para cultivar.
 * Contiene informaci√≥n t√©cnica sobre requerimientos de crecimiento,
 * compatibilidades y caracter√≠sticas de cada variedad.
 */
model CropVariety {
  /// UUID √∫nico de la variedad
  id                String        @id @default(uuid())
  /// Nombre com√∫n de la variedad
  name              String
  /// Nombre cient√≠fico (ej: Solanum lycopersicum)
  scientificName    String?
  /// Categor√≠a del cultivo
  type              CropType
  /// Descripci√≥n detallada de la variedad
  description       String?
  /// Rendimiento promedio en kg por m¬≤
  averageYield      Float?
  /// D√≠as desde siembra hasta cosecha
  daysToMaturity    Int?
  /// Profundidad de siembra en cent√≠metros
  plantingDepth     Float?
  /// Espaciado entre plantas en cent√≠metros
  spacingBetween    Float?
  /// Requerimientos h√≠dricos
  waterRequirements String? // "low", "medium", "high"
  /// Requerimientos de luz solar
  sunRequirements   String? // "full", "partial", "shade"
  /// Temperatura ideal de crecimiento
  idealTemperature  Json? // { min: number, max: number }
  /// Rango de pH ideal del suelo
  idealPh           Json? // { min: number, max: number }
  /// Plantas compatibles para siembra asociada
  compatibleWith    String[]
  /// Plantas incompatibles (evitar cercan√≠a)
  incompatibleWith  String[]
  /// Estaciones ideales para plantaci√≥n
  plantingSeasons   Season[]
  /// Estaciones de cosecha
  harvestSeasons    Season[]
  /// Fecha de creaci√≥n del registro
  createdAt         DateTime      @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt         DateTime      @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt         DateTime?
  
  // Relations
  /// Cultivos que usan esta variedad
  crops Crop[]
  
  @@map("crop_varieties")
}

/**
 * Cultivo activo
 * 
 * Representa una instancia espec√≠fica de un cultivo plantado
 * en un bancal determinado. Incluye fechas, estado actual
 * y seguimiento del ciclo de vida de la plantaci√≥n.
 */
model Crop {
  /// UUID √∫nico del cultivo
  id             String         @id @default(uuid())
  /// Bancal donde est√° plantado
  plotId         String
  /// Variedad de cultivo utilizada
  varietyId      String
  /// Fecha real de plantaci√≥n/siembra
  plantingDate   DateTime?
  /// Fecha estimada de cosecha
  expectedHarvest DateTime?
  /// Fecha real de cosecha completada
  actualHarvest  DateTime?
  /// N√∫mero de plantas o unidades sembradas
  quantity       Int?
  /// Estado actual del cultivo
  status         CropStatus     @default(PLANNED)
  /// M√©todo de plantaci√≥n utilizado
  plantingMethod PlantingMethod
  /// Notas adicionales del agricultor
  notes          String?
  /// Fecha de creaci√≥n del registro
  createdAt      DateTime       @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt      DateTime       @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt      DateTime?
  
  // Relations
  /// Bancal donde est√° plantado
  plot         Plot          @relation(fields: [plotId], references: [id])
  /// Variedad de cultivo
  variety      CropVariety   @relation(fields: [varietyId], references: [id])
  /// Registros de cosechas de este cultivo
  harvestLogs  HarvestLog[]
  /// Registros de plantaci√≥n
  plantingLogs PlantingLog[]
  
  @@map("crops")
}

/**
 * Registro de cosecha
 * 
 * Documenta cada sesi√≥n de cosecha realizada en un cultivo,
 * incluyendo cantidad, calidad y observaciones.
 */
model HarvestLog {
  /// UUID √∫nico del registro de cosecha
  id          String   @id @default(uuid())
  /// Cultivo del que se cosecha
  cropId      String
  /// Usuario que realiz√≥ la cosecha
  userId      String
  /// Cantidad cosechada (kg o unidades)
  quantity    Float
  /// Calidad de la cosecha
  quality     String? // "excellent", "good", "fair", "poor"
  /// Observaciones sobre la cosecha
  notes       String?
  /// Fecha en que se realiz√≥ la cosecha
  harvestDate DateTime @default(now())
  /// Fecha de creaci√≥n del registro
  createdAt   DateTime @default(now())
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt   DateTime?
  
  // Relations
  /// Cultivo cosechado
  crop Crop @relation(fields: [cropId], references: [id])
  /// Usuario que realiz√≥ la cosecha
  user User @relation(fields: [userId], references: [id])
  
  @@map("harvest_logs")
}

/**
 * Registro de plantaci√≥n
 * 
 * Documenta las actividades de siembra y plantaci√≥n
 * realizadas en cada cultivo.
 */
model PlantingLog {
  /// UUID √∫nico del registro de plantaci√≥n
  id           String   @id @default(uuid())
  /// Cultivo al que pertenece la plantaci√≥n
  cropId       String
  /// Usuario que realiz√≥ la plantaci√≥n
  userId       String
  /// Cantidad de plantas/semillas
  quantity     Int
  /// M√©todo de plantaci√≥n empleado
  method       PlantingMethod
  /// Observaciones de la plantaci√≥n
  notes        String?
  /// Fecha en que se realiz√≥ la plantaci√≥n
  plantingDate DateTime @default(now())
  /// Fecha de creaci√≥n del registro
  createdAt    DateTime @default(now())
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt    DateTime?
  
  // Relations
  /// Cultivo plantado
  crop Crop @relation(fields: [cropId], references: [id])
  /// Usuario que realiz√≥ la plantaci√≥n
  user User @relation(fields: [userId], references: [id])
  
  @@map("planting_logs")
}

// ================================
// üêî CHICKEN COOP MANAGEMENT
// ================================
// Gesti√≥n completa de gallineros: aves, producci√≥n de huevos,
// control ambiental y automatizaci√≥n de puertas

/**
 * Gallina individual
 * 
 * Registro de cada ave en el gallinero con seguimiento
 * de salud, producci√≥n y caracter√≠sticas f√≠sicas.
 */
model Chicken {
  /// UUID √∫nico de la gallina
  id          String        @id @default(uuid())
  /// Nombre opcional de la gallina
  name        String?
  /// Raza de la gallina
  breed       ChickenBreed
  /// Fecha de nacimiento o eclosi√≥n
  hatchDate   DateTime?
  /// Fecha en que se adquiri√≥ la gallina
  acquiredDate DateTime     @default(now())
  /// Estado actual de salud
  status      ChickenStatus @default(HEALTHY)
  /// Color o descripci√≥n f√≠sica
  color       String?
  /// Peso aproximado en kilogramos
  weight      Float?
  /// Si es gallina ponedora o no
  isLayer     Boolean       @default(true)
  /// Notas adicionales sobre la gallina
  notes       String?
  /// Gallinero donde vive (opcional)
  coopId      String?
  /// Fecha de creaci√≥n del registro
  createdAt   DateTime      @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt   DateTime      @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt   DateTime?
  
  // Relations
  /// Gallinero donde vive
  coop    Coop?     @relation(fields: [coopId], references: [id])
  /// Registros de puesta de huevos
  eggLogs EggLog[]
  
  @@map("chickens")
}

/**
 * Gallinero
 * 
 * Estructura f√≠sica que aloja gallinas con control
 * ambiental y automatizaci√≥n de puertas.
 */
model Coop {
  /// UUID √∫nico del gallinero
  id          String      @id @default(uuid())
  /// Nombre descriptivo del gallinero
  name        String
  /// Descripci√≥n adicional
  description String?
  /// Capacidad m√°xima de gallinas
  capacity    Int
  /// Ubicaci√≥n GPS del gallinero
  location    Json? // { lat: number, lng: number }
  /// Dimensiones f√≠sicas
  dimensions  Json? // { length: number, width: number, height: number }
  /// Si tiene √°rea de paseo exterior
  hasRun      Boolean     @default(false)
  /// √Årea del paseo en metros cuadrados
  runArea     Float?
  /// Farm a la que pertenece
  farmId      String
  /// Fecha de creaci√≥n
  createdAt   DateTime    @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt   DateTime    @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt   DateTime?
  
  // Relations
  /// Farm propietaria
  farm           Farm            @relation(fields: [farmId], references: [id])
  /// Gallinas que viven en este gallinero
  chickens       Chicken[]
  /// Nodos IoT instalados en el gallinero
  iotNodes       IoTNode[]
  /// Puertas automatizadas del gallinero
  doors          CoopDoor[]
  /// Lecturas de sensores ambientales
  sensorReadings SensorReading[]
  
  @@map("coops")
}

/**
 * Puerta autom√°tica del gallinero
 * 
 * Control automatizado de apertura/cierre basado
 * en horarios o sensores de luz solar.
 */
model CoopDoor {
  /// UUID √∫nico de la puerta
  id            String     @id @default(uuid())
  /// Gallinero al que pertenece
  coopId        String
  /// Nombre descriptivo de la puerta
  name          String
  /// Estado actual de la puerta
  status        DoorStatus @default(CLOSED)
  /// Si est√° en modo autom√°tico
  isAutomatic   Boolean    @default(true)
  /// Hora fija de apertura (HH:MM)
  openTime      String?
  /// Hora fija de cierre (HH:MM)
  closeTime     String?
  /// Usar horarios de amanecer/atardecer
  useSunriseSunset Boolean @default(true)
  /// Offset en minutos del amanecer para abrir
  sunriseOffset Int       @default(0)
  /// Offset en minutos del atardecer para cerrar
  sunsetOffset  Int       @default(0)
  /// Fecha de creaci√≥n
  createdAt     DateTime   @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt     DateTime   @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt     DateTime?
  
  // Relations
  /// Gallinero al que pertenece
  coop     Coop       @relation(fields: [coopId], references: [id])
  /// Logs de actividad de la puerta
  doorLogs DoorLog[]
  
  @@map("coop_doors")
}

/**
 * Registro de actividad de puerta
 * 
 * Log de cada apertura/cierre de puerta con
 * informaci√≥n sobre el trigger que lo caus√≥.
 */
model DoorLog {
  /// UUID √∫nico del log
  id        String     @id @default(uuid())
  /// Puerta que gener√≥ el evento
  doorId    String
  /// Estado resultante de la puerta
  status    DoorStatus
  /// Qu√© caus√≥ el cambio de estado
  trigger   String // "manual", "scheduled", "sensor", "emergency"
  /// Momento en que ocurri√≥ el evento
  timestamp DateTime   @default(now())
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt DateTime?
  
  // Relations
  /// Puerta que gener√≥ el log
  door CoopDoor @relation(fields: [doorId], references: [id])
  
  @@map("door_logs")
}

/**
 * Registro de recolecci√≥n de huevos
 * 
 * Documenta cada sesi√≥n de recolecci√≥n con
 * informaci√≥n de calidad y cantidad.
 */
model EggLog {
  /// UUID √∫nico del registro
  id        String     @id @default(uuid())
  /// Gallina que puso el huevo (si se conoce)
  chickenId String?
  /// Gallinero donde se encontr√≥ (si gallina desconocida)
  coopId    String?
  /// Cantidad de huevos recolectados
  quantity  Int        @default(1)
  /// Peso total en gramos
  weight    Float?
  /// Calidad de los huevos
  quality   EggQuality @default(GOOD)
  /// Observaciones adicionales
  notes     String?
  /// Fecha y hora de recolecci√≥n
  collectedAt DateTime @default(now())
  /// Fecha de creaci√≥n del registro
  createdAt DateTime   @default(now())
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt DateTime?
  
  // Relations
  /// Gallina que puso el huevo
  chicken Chicken? @relation(fields: [chickenId], references: [id])
  
  @@map("egg_logs")
}

// ================================
// üì° IOT AND SENSOR MANAGEMENT
// ================================
// Red distribuida de nodos IoT con sensores m√∫ltiples,
// comunicaci√≥n mesh y gesti√≥n energ√©tica solar

/**
 * Nodo IoT
 * 
 * Dispositivo f√≠sico distribuido en la farm que contiene
 * m√∫ltiples sensores y se comunica con el sistema central.
 * Cada nodo tiene gesti√≥n energ√©tica y conectividad mesh.
 */
model IoTNode {
  /// UUID √∫nico del nodo IoT
  id             String       @id @default(uuid())
  /// Nombre descriptivo del nodo
  name           String
  /// Descripci√≥n adicional del nodo
  description    String?
  /// Direcci√≥n MAC √∫nica del dispositivo
  macAddress     String       @unique
  /// Direcci√≥n IP actual en la red
  ipAddress      String?
  /// Versi√≥n del firmware instalado
  firmwareVersion String?
  /// √öltimo heartbeat recibido del nodo
  lastHeartbeat  DateTime?
  /// Nivel de bater√≠a en porcentaje (0-100)
  batteryLevel   Float?
  /// Intensidad de se√±al RSSI en dBm
  signalStrength Float?
  /// Estado actual del sistema
  status         SystemStatus @default(OFFLINE)
  /// Ubicaci√≥n GPS del nodo
  location       Json? // { lat: number, lng: number, altitude?: number }
  /// Bancal donde est√° instalado (opcional)
  plotId         String?
  /// Gallinero donde est√° instalado (opcional)
  coopId         String?
  /// Farm a la que pertenece
  farmId         String
  /// Fuente de energ√≠a principal
  energySource   EnergySource @default(BATTERY)
  /// Fecha de instalaci√≥n
  createdAt      DateTime     @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt      DateTime     @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt      DateTime?
  
  // Relations
  /// Farm propietaria del nodo
  farm           Farm            @relation(fields: [farmId], references: [id])
  /// Bancal donde est√° instalado
  plot           Plot?           @relation(fields: [plotId], references: [id])
  /// Gallinero donde est√° instalado
  coop           Coop?           @relation(fields: [coopId], references: [id])
  /// Sensores conectados al nodo
  sensors        Sensor[]
  /// Lecturas de sensores del nodo
  sensorReadings SensorReading[]
  /// Alertas generadas por el nodo
  alerts         Alert[]
  
  @@map("iot_nodes")
}

/**
 * Sensor f√≠sico
 * 
 * Dispositivo de medici√≥n espec√≠fico conectado a un nodo IoT.
 * Cada sensor mide un par√°metro ambiental espec√≠fico con
 * sus propios rangos y calibraci√≥n.
 */
model Sensor {
  /// UUID √∫nico del sensor
  id          String     @id @default(uuid())
  /// Nodo IoT al que est√° conectado
  nodeId      String
  /// Tipo de sensor y qu√© mide
  type        SensorType
  /// Modelo espec√≠fico del sensor
  model       String?
  /// Par√°metros de calibraci√≥n del sensor
  calibration Json? // { offset: number, multiplier: number, ... }
  /// Valor m√≠nimo que puede medir
  minValue    Float?
  /// Valor m√°ximo que puede medir
  maxValue    Float?
  /// Unidad de medida del sensor
  unit        String
  /// Si el sensor est√° actualmente activo
  isActive    Boolean    @default(true)
  /// Fecha de instalaci√≥n
  createdAt   DateTime   @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt   DateTime   @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt   DateTime?
  
  // Relations
  /// Nodo IoT al que pertenece
  node     IoTNode         @relation(fields: [nodeId], references: [id])
  /// Lecturas tomadas por este sensor
  readings SensorReading[]
  
  @@map("sensors")
}

/**
 * Lectura de sensor
 * 
 * Medici√≥n individual tomada por un sensor en un momento espec√≠fico.
 * Incluye informaci√≥n de calidad del dato y contexto de ubicaci√≥n.
 */
model SensorReading {
  /// UUID √∫nico de la lectura
  id        String   @id @default(uuid())
  /// Nodo que tom√≥ la medici√≥n
  nodeId    String
  /// Sensor espec√≠fico que tom√≥ la medici√≥n
  sensorId  String
  /// Bancal donde se tom√≥ la medici√≥n (si aplica)
  plotId    String?
  /// Gallinero donde se tom√≥ la medici√≥n (si aplica)
  coopId    String?
  /// Valor medido por el sensor
  value     Float
  /// Unidad de la medici√≥n
  unit      String
  /// Calidad del dato (0-1, donde 1 es perfecta)
  quality   Float?
  /// Momento exacto de la medici√≥n
  timestamp DateTime @default(now())
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt DateTime?
  
  // Relations
  /// Nodo que gener√≥ la lectura
  node   IoTNode  @relation(fields: [nodeId], references: [id])
  /// Sensor que tom√≥ la medici√≥n
  sensor Sensor   @relation(fields: [sensorId], references: [id])
  /// Bancal donde se midi√≥
  plot   Plot?    @relation(fields: [plotId], references: [id])
  /// Gallinero donde se midi√≥
  coop   Coop?    @relation(fields: [coopId], references: [id])
  
  /// √çndices para consultas eficientes por nodo y tiempo
  @@index([nodeId, timestamp])
  /// √çndices para consultas eficientes por sensor y tiempo
  @@index([sensorId, timestamp])
  @@map("sensor_readings")
}

// ================================
// üíß IRRIGATION SYSTEM
// ================================
// Sistema de riego inteligente: zonas independientes,
// v√°lvulas automatizadas y programaci√≥n flexible

/**
 * Zona de riego
 * 
 * √Årea delimitada con sistema de riego independiente.
 * Cada zona puede tener m√∫ltiples v√°lvulas y programaciones
 * espec√≠ficas seg√∫n las necesidades de los cultivos.
 */
model IrrigationZone {
  /// UUID √∫nico de la zona de riego
  id          String            @id @default(uuid())
  /// Bancal al que pertenece esta zona
  plotId      String
  /// Farm propietaria de la zona
  farmId      String
  /// Nombre descriptivo de la zona
  name        String
  /// Descripci√≥n adicional de la zona
  description String?
  /// √Årea cubierta en metros cuadrados
  area        Float?
  /// Caudal de agua en litros por minuto
  flowRate    Float?
  /// Estado actual del sistema de riego
  status      IrrigationStatus  @default(INACTIVE)
  /// Si la zona est√° activa para programaci√≥n
  isActive    Boolean           @default(true)
  /// Fecha de creaci√≥n
  createdAt   DateTime          @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt   DateTime          @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt   DateTime?
  
  // Relations
  /// Farm propietaria
  farm            Farm              @relation(fields: [farmId], references: [id])
  /// Bancal donde est√° ubicada
  plot            Plot              @relation(fields: [plotId], references: [id])
  /// V√°lvulas de control de la zona
  valves          IrrigationValve[]
  /// Programaciones de riego
  schedules       IrrigationSchedule[]
  /// Logs de actividad de riego
  logs            IrrigationLog[]
  /// Reglas de automatizaci√≥n
  automationRules AutomationRule[]
  
  @@map("irrigation_zones")
}

/**
 * V√°lvula de riego
 * 
 * Actuador f√≠sico que controla el flujo de agua
 * en una zona espec√≠fica. Controlable remotamente
 * mediante GPIO en nodos IoT.
 */
model IrrigationValve {
  /// UUID √∫nico de la v√°lvula
  id        String      @id @default(uuid())
  /// Zona de riego a la que pertenece
  zoneId    String
  /// Nombre descriptivo de la v√°lvula
  name      String
  /// Pin GPIO para control (en nodo IoT)
  pin       Int?
  /// Estado actual de la v√°lvula
  status    ValveStatus @default(CLOSED)
  /// √öltima vez que se abri√≥
  lastOpened DateTime?
  /// √öltima vez que se cerr√≥
  lastClosed DateTime?
  /// Fecha de instalaci√≥n
  createdAt DateTime    @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt DateTime    @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt DateTime?
  
  // Relations
  /// Zona de riego que controla
  zone IrrigationZone @relation(fields: [zoneId], references: [id])
  
  @@map("irrigation_valves")
}

/**
 * Programaci√≥n de riego
 * 
 * Horario autom√°tico configurado para una zona espec√≠fica.
 * Incluye d√≠as de la semana, hora de inicio, duraci√≥n
 * y condiciones meteorol√≥gicas a verificar.
 */
model IrrigationSchedule {
  /// UUID √∫nico de la programaci√≥n
  id          String   @id @default(uuid())
  /// Zona de riego programada
  zoneId      String
  /// Nombre descriptivo de la programaci√≥n
  name        String
  /// Hora de inicio en formato HH:MM
  startTime   String
  /// Duraci√≥n del riego en minutos
  duration    Int
  /// D√≠as de la semana (0-6, domingo=0)
  daysOfWeek  Int[]
  /// Si la programaci√≥n est√° activa
  isActive    Boolean  @default(true)
  /// Condiciones meteorol√≥gicas a verificar
  conditions  Json? // { maxRain: number, minTemperature: number, ... }
  /// Fecha de creaci√≥n
  createdAt   DateTime @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt   DateTime @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt   DateTime?
  
  // Relations
  /// Zona de riego programada
  zone IrrigationZone @relation(fields: [zoneId], references: [id])
  
  @@map("irrigation_schedules")
}

/**
 * Registro de actividad de riego
 * 
 * Log de cada sesi√≥n de riego ejecutada, incluyendo
 * duraci√≥n real, consumo de agua y trigger que lo activ√≥.
 */
model IrrigationLog {
  /// UUID √∫nico del registro
  id        String            @id @default(uuid())
  /// Zona donde se ejecut√≥ el riego
  zoneId    String
  /// Usuario que inici√≥ el riego (si fue manual)
  userId    String?
  /// Momento de inicio del riego
  startTime DateTime
  /// Momento de finalizaci√≥n del riego
  endTime   DateTime?
  /// Duraci√≥n real en minutos
  duration  Int?
  /// Estado final del riego
  status    IrrigationStatus
  /// Qu√© dispar√≥ el riego
  trigger   String // "manual", "scheduled", "sensor", "ai"
  /// Cantidad de agua utilizada en litros
  waterUsed Float?
  /// Observaciones adicionales
  notes     String?
  /// Fecha de creaci√≥n del registro
  createdAt DateTime          @default(now())
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt DateTime?
  
  // Relations
  /// Zona donde se ejecut√≥
  zone IrrigationZone @relation(fields: [zoneId], references: [id])
  /// Usuario que ejecut√≥ (si fue manual)
  user User?          @relation(fields: [userId], references: [id])
  
  @@map("irrigation_logs")
}

// ================================
// ü§ñ AUTOMATION SYSTEM
// ================================
// Motor de reglas configurable para automatizaci√≥n completa:
// riego por sensores, horarios y control basado en IA

/**
 * Regla de automatizaci√≥n
 * 
 * Define l√≥gica de control autom√°tico basada en condiciones
 * de sensores, horarios o IA. Cada regla puede disparar
 * m√∫ltiples acciones cuando se cumplen las condiciones.
 */
model AutomationRule {
  /// UUID √∫nico de la regla
  id          String         @id @default(uuid())
  /// Nombre descriptivo de la regla
  name        String
  /// Descripci√≥n del prop√≥sito de la regla
  description String?
  /// Zona de riego asociada (opcional)
  zoneId      String?
  /// Condiciones que disparan la regla
  conditions  Json // { sensorType: string, operator: string, value: number, ... }
  /// Acciones a ejecutar cuando se dispara
  actions     Json // { type: string, parameters: object, ... }
  /// Modo de operaci√≥n de la automatizaci√≥n
  mode        AutomationMode @default(SENSOR_BASED)
  /// Si la regla est√° activa
  isActive    Boolean        @default(true)
  /// Prioridad de ejecuci√≥n (mayor n√∫mero = mayor prioridad)
  priority    Int            @default(0)
  /// Fecha de creaci√≥n
  createdAt   DateTime       @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt   DateTime       @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt   DateTime?
  
  // Relations
  /// Zona de riego asociada
  zone            IrrigationZone?      @relation(fields: [zoneId], references: [id])
  /// Logs de ejecuci√≥n de la regla
  executionLogs   AutomationExecution[]
  
  @@map("automation_rules")
}

/**
 * Ejecuci√≥n de automatizaci√≥n
 * 
 * Registro de cada vez que se eval√∫a y ejecuta una regla
 * de automatizaci√≥n, incluyendo resultado y errores.
 */
model AutomationExecution {
  /// UUID √∫nico de la ejecuci√≥n
  id           String   @id @default(uuid())
  /// Regla que se ejecut√≥
  ruleId       String
  /// Si la regla se dispar√≥ efectivamente
  triggered    Boolean
  /// Estado de las condiciones al momento de evaluaci√≥n
  conditions   Json // { condition1: { evaluated: true, value: 25 }, ... }
  /// Acciones que se ejecutaron
  actions      Json // { action1: { executed: true, result: "success" }, ... }
  /// Si la ejecuci√≥n fue exitosa
  success      Boolean
  /// Mensaje de error (si hubo fallo)
  errorMessage String?
  /// Momento de la ejecuci√≥n
  executedAt   DateTime @default(now())
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt    DateTime?
  
  // Relations
  /// Regla que se ejecut√≥
  rule AutomationRule @relation(fields: [ruleId], references: [id])
  
  @@map("automation_executions")
}

// ================================
// üö® ALERTS AND NOTIFICATIONS
// ================================
// Sistema de alertas en tiempo real y notificaciones
// multi-canal: email, SMS, Telegram, Slack, Discord

/**
 * Alerta del sistema
 * 
 * Notificaci√≥n de eventos importantes que requieren atenci√≥n:
 * fallos de sensores, condiciones cr√≠ticas, mantenimiento, etc.
 * Incluye sistema de asignaci√≥n y seguimiento de resoluci√≥n.
 */
model Alert {
  /// UUID √∫nico de la alerta
  id          String     @id @default(uuid())
  /// Farm donde se gener√≥ la alerta
  farmId      String
  /// Nodo IoT que gener√≥ la alerta (opcional)
  nodeId      String?
  /// Tipo de alerta generada
  type        AlertType
  /// Nivel de severidad
  level       AlertLevel
  /// T√≠tulo descriptivo de la alerta
  title       String
  /// Mensaje detallado de la alerta
  message     String
  /// Si la alerta ha sido le√≠da
  isRead      Boolean    @default(false)
  /// Si la alerta ha sido resuelta
  isResolved  Boolean    @default(false)
  /// Usuario que cre√≥ la alerta
  createdById String?
  /// Usuario asignado para resolver la alerta
  assignedToId String?
  /// Momento en que se resolvi√≥ la alerta
  resolvedAt  DateTime?
  /// Fecha de creaci√≥n de la alerta
  createdAt   DateTime   @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt   DateTime   @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt   DateTime?
  
  // Relations
  /// Farm donde se gener√≥
  farm       Farm     @relation(fields: [farmId], references: [id])
  /// Nodo IoT que la gener√≥
  node       IoTNode? @relation(fields: [nodeId], references: [id])
  /// Usuario que cre√≥ la alerta
  createdBy  User?    @relation("AlertCreatedBy", fields: [createdById], references: [id])
  /// Usuario asignado para resolverla
  assignedTo User?    @relation("AlertAssignedTo", fields: [assignedToId], references: [id])
  
  @@map("alerts")
}

/**
 * Notificaci√≥n
 * 
 * Mensaje enviado a un usuario a trav√©s de diferentes canales:
 * email, SMS, push, Telegram, etc. Incluye tracking de entrega
 * y lectura para asegurar que llegan las comunicaciones cr√≠ticas.
 */
model Notification {
  /// UUID √∫nico de la notificaci√≥n
  id        String              @id @default(uuid())
  /// Usuario destinatario
  userId    String
  /// Canal de comunicaci√≥n utilizado
  channel   NotificationChannel
  /// T√≠tulo de la notificaci√≥n
  title     String
  /// Contenido del mensaje
  message   String
  /// Datos adicionales (JSON payload)
  data      Json? // { alertId: string, actionUrl: string, ... }
  /// Si la notificaci√≥n fue enviada exitosamente
  sent      Boolean             @default(false)
  /// Momento en que se envi√≥
  sentAt    DateTime?
  /// Si el usuario ley√≥ la notificaci√≥n
  read      Boolean             @default(false)
  /// Momento en que se ley√≥
  readAt    DateTime?
  /// Fecha de creaci√≥n
  createdAt DateTime            @default(now())
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt DateTime?
  
  // Relations
  /// Usuario destinatario
  user User @relation(fields: [userId], references: [id])
  
  @@map("notifications")
}

// ================================
// üå§Ô∏è WEATHER AND ENVIRONMENTAL DATA
// ================================
// Estaci√≥n meteorol√≥gica local integrada con APIs externas
// (OpenWeather, AEMET) para decisiones agr√≠colas inteligentes

/**
 * Datos meteorol√≥gicos
 * 
 * Informaci√≥n clim√°tica local obtenida de estaci√≥n meteorol√≥gica
 * propia o APIs externas (OpenWeather, AEMET). Utilizada para
 * decisiones autom√°ticas de riego y alertas de condiciones adversas.
 */
model WeatherData {
  /// UUID √∫nico del registro meteorol√≥gico
  id           String           @id @default(uuid())
  /// Farm a la que corresponde el dato
  farmId       String
  /// Ubicaci√≥n espec√≠fica de la medici√≥n
  location     String
  /// Temperatura actual en grados Celsius
  temperature  Float
  /// Humedad relativa del aire (%)
  humidity     Float
  /// Presi√≥n atmosf√©rica en hPa
  pressure     Float
  /// Velocidad del viento en km/h
  windSpeed    Float?
  /// Direcci√≥n del viento en grados (0-360)
  windDirection Float?
  /// Precipitaci√≥n acumulada en mm
  rainfall     Float?
  /// √çndice UV
  uv          Float?
  /// Condici√≥n meteorol√≥gica general
  condition    WeatherCondition
  /// Datos de pron√≥stico extendido
  forecast     Json? // { hourly: [], daily: [], alerts: [] }
  /// Fuente de los datos meteorol√≥gicos
  source       String // "local", "openweather", "aemet"
  /// Momento de la medici√≥n/obtenci√≥n
  timestamp    DateTime         @default(now())
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt    DateTime?
  
  // Relations
  /// Farm a la que pertenece
  farm Farm @relation(fields: [farmId], references: [id])
  
  /// √çndice para consultas eficientes por farm y tiempo
  @@index([farmId, timestamp])
  /// √çndice para consultas por ubicaci√≥n y tiempo
  @@index([location, timestamp])
  @@map("weather_data")
}

// ================================
// üîã ENERGY MANAGEMENT
// ================================
// Gesti√≥n energ√©tica sostenible: paneles solares, bater√≠as
// y optimizaci√≥n autom√°tica del consumo por IA

/**
 * Panel solar
 * 
 * Panel fotovoltaico instalado en la farm para generaci√≥n
 * de energ√≠a renovable. Incluye especificaciones t√©cnicas
 * y monitoreo de producci√≥n energ√©tica.
 */
model SolarPanel {
  /// UUID √∫nico del panel solar
  id           String    @id @default(uuid())
  /// Farm donde est√° instalado
  farmId       String
  /// Nodo IoT que monitorea el panel (opcional)
  nodeId       String?
  /// Nombre descriptivo del panel
  name         String
  /// Capacidad m√°xima en watts
  capacity     Float
  /// Eficiencia del panel (%)
  efficiency   Float?
  /// √Ångulo de inclinaci√≥n en grados
  tiltAngle    Float?
  /// √Ångulo de azimut en grados (orientaci√≥n)
  azimuthAngle Float?
  /// Fecha de instalaci√≥n
  installDate  DateTime?
  /// Si el panel est√° activo
  isActive     Boolean   @default(true)
  /// Fecha de creaci√≥n del registro
  createdAt    DateTime  @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt    DateTime  @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt    DateTime?
  
  // Relations
  /// Farm donde est√° instalado
  farm       Farm        @relation(fields: [farmId], references: [id])
  /// Logs de generaci√≥n energ√©tica
  energyLogs EnergyLog[]
  
  @@map("solar_panels")
}

/**
 * Bater√≠a del sistema
 * 
 * Sistema de almacenamiento energ√©tico para autonom√≠a
 * durante per√≠odos sin sol. Monitorea salud, ciclos
 * de carga y capacidad residual.
 */
model Battery {
  /// UUID √∫nico de la bater√≠a
  id           String    @id @default(uuid())
  /// Farm donde est√° instalada
  farmId       String
  /// Nodo IoT que monitorea la bater√≠a (opcional)
  nodeId       String?
  /// Nombre descriptivo de la bater√≠a
  name         String
  /// Capacidad nominal en amperios-hora (Ah)
  capacity     Float
  /// Voltaje nominal en volts (V)
  voltage      Float
  /// Qu√≠mica de la bater√≠a
  chemistry    String? // "LiPo", "Li-ion", "Lead-acid", "LiFePO4"
  /// N√∫mero de ciclos de carga completados
  cycleCount   Int       @default(0)
  /// Estado de salud de la bater√≠a (%)
  healthStatus Float?    @default(100)
  /// Fecha de instalaci√≥n
  installDate  DateTime?
  /// Si la bater√≠a est√° activa
  isActive     Boolean   @default(true)
  /// Fecha de creaci√≥n del registro
  createdAt    DateTime  @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt    DateTime  @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt    DateTime?
  
  // Relations
  /// Farm donde est√° instalada
  farm       Farm        @relation(fields: [farmId], references: [id])
  /// Logs de actividad energ√©tica
  energyLogs EnergyLog[]
  
  @@map("batteries")
}

/**
 * Registro de energ√≠a
 * 
 * Log de producci√≥n, consumo y almacenamiento energ√©tico
 * del sistema. Permite an√°lisis de eficiencia y autonom√≠a
 * para optimizaci√≥n energ√©tica mediante IA.
 */
model EnergyLog {
  /// UUID √∫nico del registro energ√©tico
  id              String       @id @default(uuid())
  /// Panel solar que gener√≥ energ√≠a (opcional)
  solarPanelId    String?
  /// Bater√≠a involucrada en el registro (opcional)
  batteryId       String?
  /// Energ√≠a generada por paneles solares (W)
  generated       Float?
  /// Energ√≠a consumida por el sistema (W)
  consumed        Float?
  /// Energ√≠a almacenada en bater√≠as (W)
  stored          Float?
  /// Nivel de carga de la bater√≠a (%)
  batteryLevel    Float?
  /// Voltaje actual de la bater√≠a (V)
  batteryVoltage  Float?
  /// Corriente de la bater√≠a (A, + carga, - descarga)
  batteryCurrent  Float?
  /// Consumo de la red el√©ctrica externa (W)
  gridConsumption Float?
  /// Eficiencia general del sistema (%)
  efficiency      Float?
  /// Momento del registro
  timestamp       DateTime     @default(now())
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt       DateTime?
  
  // Relations
  /// Panel solar que gener√≥ la energ√≠a
  solarPanel SolarPanel? @relation(fields: [solarPanelId], references: [id])
  /// Bater√≠a involucrada
  battery    Battery?    @relation(fields: [batteryId], references: [id])
  
  /// √çndice para consultas eficientes por tiempo
  @@index([timestamp])
  @@map("energy_logs")
}

// ================================
// üß† ANALYTICS AND AI
// ================================
// Motor de inteligencia artificial: predicciones de rendimiento,
// asistente conversacional y an√°lisis predictivo avanzado

/**
 * Predicci√≥n de IA
 * 
 * Resultado de modelos de machine learning aplicados
 * a diferentes aspectos del sistema: rendimiento de cultivos,
 * necesidades de riego, condiciones meteorol√≥gicas, etc.
 */
model Prediction {
  /// UUID √∫nico de la predicci√≥n
  id          String   @id @default(uuid())
  /// Tipo de predicci√≥n realizada
  type        String // "yield", "irrigation", "weather", "pest", "harvest"
  /// Descripci√≥n de qu√© se est√° prediciendo
  target      String // "crop_yield", "irrigation_need", "rainfall", etc.
  /// ID de la entidad objetivo (plot, crop, etc.)
  targetId    String?
  /// Modelo de IA utilizado para la predicci√≥n
  model       String // "random_forest", "neural_network", "lstm", etc.
  /// Nivel de confianza de la predicci√≥n (0-1)
  confidence  Float
  /// Datos de la predicci√≥n
  prediction  Json // { value: number, range: {min, max}, factors: [] }
  /// Valor real para entrenamiento posterior
  actualValue Json?
  /// Fecha hasta que es v√°lida la predicci√≥n
  validUntil  DateTime?
  /// Fecha de creaci√≥n de la predicci√≥n
  createdAt   DateTime @default(now())
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt   DateTime?
  
  /// √çndice para consultas eficientes por tipo y objetivo
  @@index([type, targetId])
  @@map("predictions")
}

/**
 * Interacci√≥n con asistente IA
 * 
 * Registro de conversaciones con el chatbot/asistente
 * inteligente del sistema. Incluye feedback para mejora
 * continua del modelo de lenguaje.
 */
model AIInteraction {
  /// UUID √∫nico de la interacci√≥n
  id        String   @id @default(uuid())
  /// Usuario que interactu√≥ con la IA
  userId    String
  /// Pregunta o consulta del usuario
  query     String
  /// Respuesta generada por la IA
  response  String
  /// Contexto de la conversaci√≥n
  context   Json? // { conversation_id: string, previous_queries: [], farm_context: {} }
  /// Calificaci√≥n del usuario (1-5 estrellas)
  feedback  Int?
  /// Fecha de la interacci√≥n
  createdAt DateTime @default(now())
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt DateTime?
  
  // Relations
  /// Usuario que realiz√≥ la consulta
  user User @relation(fields: [userId], references: [id])
  
  @@map("ai_interactions")
}

/**
 * Reporte de anal√≠ticas
 * 
 * Reporte autom√°tico generado por el sistema de anal√≠ticas
 * con m√©tricas de rendimiento, eficiencia y tendencias
 * a lo largo de diferentes per√≠odos temporales.
 */
model AnalyticsReport {
  /// UUID √∫nico del reporte
  id         String   @id @default(uuid())
  /// Nombre descriptivo del reporte
  name       String
  /// Tipo de reporte generado
  type       String // "yield", "efficiency", "consumption", "energy", "alerts"
  /// Per√≠odo temporal del reporte
  period     String // "daily", "weekly", "monthly", "yearly", "seasonal"
  /// Datos del reporte en formato JSON
  data       Json // { metrics: {}, charts: [], summary: "", recommendations: [] }
  /// Fecha de generaci√≥n del reporte
  generatedAt DateTime @default(now())
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt  DateTime?
  
  @@map("analytics_reports")
}

// ================================
// üîß MAINTENANCE AND SYSTEM LOGS
// ================================
// Seguimiento de mantenimiento preventivo y logs del sistema
// para monitoreo completo y diagn√≥stico de problemas

/**
 * Registro de mantenimiento
 * 
 * Log de actividades de mantenimiento realizadas en el sistema:
 * limpieza, calibraci√≥n, reparaciones, reemplazos. Incluye
 * programaci√≥n de mantenimiento preventivo.
 */
model MaintenanceLog {
  /// UUID √∫nico del registro de mantenimiento
  id          String   @id @default(uuid())
  /// Usuario que realiz√≥ el mantenimiento
  userId      String
  /// Nodo IoT mantenido (opcional)
  nodeId      String?
  /// Tipo de mantenimiento realizado
  type        String // "cleaning", "calibration", "repair", "replacement", "inspection"
  /// Descripci√≥n detallada del trabajo realizado
  description String
  /// Costo del mantenimiento (opcional)
  cost        Float?
  /// Fecha programada del pr√≥ximo mantenimiento
  nextDue     DateTime?
  /// Fecha en que se complet√≥ el mantenimiento
  completedAt DateTime @default(now())
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt   DateTime?
  
  // Relations
  /// Usuario que realiz√≥ el mantenimiento
  user User @relation(fields: [userId], references: [id])
  
  @@map("maintenance_logs")
}

/**
 * Log del sistema
 * 
 * Registro de eventos t√©cnicos del sistema para debugging,
 * monitoreo y auditor√≠a. Incluye diferentes niveles de
 * severidad y componentes del sistema.
 */
model SystemLog {
  /// UUID √∫nico del log
  id        String   @id @default(uuid())
  /// Nivel de severidad del log
  level     String // "info", "warning", "error", "debug", "critical"
  /// Componente del sistema que gener√≥ el log
  component String // "backend", "node", "sensor", "irrigation", "energy", "ai"
  /// Mensaje descriptivo del evento
  message   String
  /// Datos adicionales del evento
  data      Json? // { error_code: string, stack_trace: string, context: {} }
  /// Momento en que ocurri√≥ el evento
  timestamp DateTime @default(now())
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt DateTime?
  
  /// √çndice para consultas eficientes por nivel y tiempo
  @@index([level, timestamp])
  /// √çndice para consultas eficientes por componente y tiempo
  @@index([component, timestamp])
  @@map("system_logs")
}

// ================================
// ‚öôÔ∏è CONFIGURATIONS
// ================================
// Configuraciones del sistema por farm: umbrales de sensores,
// preferencias de alertas y par√°metros de automatizaci√≥n

/**
 * Configuraci√≥n del sistema (por farm)
 * 
 * Par√°metros configurables por farm para personalizar
 * el comportamiento del sistema: umbrales de sensores,
 * preferencias de alertas, configuraci√≥n de IA, etc.
 */
model FarmConfiguration {
  /// UUID √∫nico de la configuraci√≥n
  id        String   @id @default(uuid())
  /// Farm a la que pertenece la configuraci√≥n
  farmId    String
  /// Notificaciones por email
  emailNotifications        Boolean  @default(true)
  /// Notificaciones por SMS
  smsNotifications         Boolean  @default(false)
  /// Notificaciones por push
  pushNotifications        Boolean  @default(true)
  /// Umbral de alerta cr√≠tica
  criticalAlertThreshold   Int?     // Por ejemplo, nivel de bater√≠a m√≠nimo
  /// Modo de ahorro de energ√≠a nocturno
  energySavingMode         Boolean  @default(false)
  /// Fuente de energ√≠a preferida
  preferredEnergySource    EnergySource @default(SOLAR)
  /// Habilitado Home Assistant
  homeAssistantEnabled      Boolean  @default(false)
  /// Habilitado Telegram
  telegramEnabled           Boolean  @default(false)
  /// Habilitado Slack
  slackEnabled              Boolean  @default(false)
  // /// Idioma por defecto
  // defaultLanguage          String   @default("es")
  /// Zona horaria
  timezone               String   @default("UTC")
  /// Si la configuraci√≥n est√° activa
  isActive                  Boolean  @default(true)
  /// Fecha de creaci√≥n
  createdAt                 DateTime @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt                 DateTime @updatedAt
  /// Soft delete: registro eliminado l√≥gicamente
  deletedAt                 DateTime?
  
  // Relations
  /// Farm a la que pertenece
  farm Farm @relation(fields: [farmId], references: [id])
  
  /// Una configuraci√≥n por farm
  @@unique([farmId])
  @@map("farm_configuration")
}

/**
 * ===================================================================
 * üìä SCHEMA SUMMARY
 * ===================================================================
 * 
 * MODELS TOTAL: 30+
 * ENUMS: 12 categor√≠as con 90+ valores
 * 
 * KEY FEATURES:
 * ‚úÖ Multi-tenant architecture (Farm-based)
 * ‚úÖ IoT ready with sensor networks
 * ‚úÖ Automated irrigation with smart rules
 * ‚úÖ Solar energy management
 * ‚úÖ AI predictions and analytics
 * ‚úÖ Real-time alerts and notifications
 * ‚úÖ Comprehensive audit trails
 * ‚úÖ Optimized indexes for performance
 * 
 * RELATIONSHIPS:
 * - User ‚Üí FarmMembership ‚Üí Farm (many-to-many with roles)
 * - Farm ‚Üí Plots ‚Üí Crops (hierarchical structure)
 * - IoTNode ‚Üí Sensors ‚Üí SensorReadings (telemetry data)
 * - IrrigationZone ‚Üí AutomationRules (smart control)
 * - Farm ‚Üí SolarPanel/Battery ‚Üí EnergyLog (sustainability)
 * 
 * ===================================================================
 */