/**
 * ===================================================================
 * üåø GREENHUB LABS - PRISMA SCHEMA
 * ===================================================================
 * 
 * Sistema de automatizaci√≥n agr√≠cola inteligente con arquitectura multitenant.
 * Gestiona huertos, gallineros, sistemas IoT, riego autom√°tico, energ√≠a solar
 * y an√°lisis predictivo mediante IA.
 * 
 * @version 1.0.0
 * @author GreenHub Labs Team
 * @description Base de datos para plataforma de agricultura inteligente
 * 
 * ARQUITECTURA:
 * - Multitenant: M√∫ltiples farms por usuario
 * - IoT Ready: Nodos distribuidos con sensores
 * - AI Integration: Predicciones y automatizaci√≥n
 * - Energy Management: Solar + Battery monitoring
 * 
 * ===================================================================
 */

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// üè∑Ô∏è ENUMS & TYPE DEFINITIONS
// ================================

/// Roles de usuario dentro de una farm
/// Define los niveles de acceso y permisos
enum Roles {
  OWNER         /// Propietario: acceso total, puede eliminar farm
  ADMINISTRATOR /// Administrador: gesti√≥n completa excepto eliminaci√≥n
  MANAGER       /// Gestor: control operativo de cultivos y sistemas
  VIEWER        /// Observador: solo lectura de datos y reportes
  GUEST         /// Invitado: acceso limitado a informaci√≥n b√°sica
}

/// Estado actual de un bancal/plot
enum PlotStatus {
  ACTIVE    /// En uso activo con cultivos
  INACTIVE  /// Temporalmente fuera de uso
  PREPARING /// En preparaci√≥n para nueva siembra
  RESTING   /// En barbecho para recuperaci√≥n del suelo
}

/// Estado del ciclo de vida de un cultivo
enum CropStatus {
  PLANNED    /// Planificado pero no plantado
  PLANTED    /// Reci√©n plantado o sembrado
  GROWING    /// En crecimiento vegetativo
  FLOWERING  /// En floraci√≥n
  FRUITING   /// Produciendo frutos
  HARVESTING /// En proceso de cosecha
  FINISHED   /// Ciclo completado
}

/// Categor√≠a del tipo de cultivo
enum CropType {
  VEGETABLE /// Hortalizas (tomate, lechuga, etc.)
  FRUIT     /// Frutales (manzanas, fresas, etc.)
  HERB      /// Hierbas arom√°ticas y medicinales
  GRAIN     /// Cereales (trigo, avena, etc.)
  LEGUME    /// Leguminosas (jud√≠as, garbanzos, etc.)
  ROOT      /// Tub√©rculos (patatas, zanahorias, etc.)
  FLOWER    /// Plantas ornamentales
}

/// Estaciones del a√±o para planificaci√≥n
enum Season {
  SPRING /// Primavera: marzo-mayo
  SUMMER /// Verano: junio-agosto
  AUTUMN /// Oto√±o: septiembre-noviembre
  WINTER /// Invierno: diciembre-febrero
}

/// M√©todo de plantaci√≥n utilizado
enum PlantingMethod {
  DIRECT_SEED /// Siembra directa en el suelo
  TRANSPLANT  /// Trasplante desde semillero
  CUTTING     /// Propagaci√≥n por esqueje
  BULB        /// Plantaci√≥n de bulbos
}

/// Tipos de sensores IoT disponibles
enum SensorType {
  SOIL_MOISTURE    /// Humedad del suelo (%)
  TEMPERATURE      /// Temperatura ambiente (¬∞C)
  HUMIDITY         /// Humedad relativa del aire (%)
  PH              /// Acidez del suelo (0-14)
  LIGHT           /// Luminosidad ambiental (lux)
  PRESSURE        /// Presi√≥n atmosf√©rica (hPa)
  CO2             /// Concentraci√≥n de CO2 (ppm)
  NH3             /// Concentraci√≥n de amon√≠aco (ppm)
  WATER_FLOW      /// Flujo de agua (l/min)
  WATER_PRESSURE  /// Presi√≥n del agua (bar)
  BATTERY_LEVEL   /// Nivel de bater√≠a (%)
  SOLAR_GENERATION /// Generaci√≥n solar (W)
}

/// Estado del sistema de riego
enum IrrigationStatus {
  INACTIVE  /// Sistema apagado
  ACTIVE    /// Regando actualmente
  SCHEDULED /// Programado para regar
  MANUAL    /// Control manual activo
  ERROR     /// Error en el sistema
}

/// Estado de las v√°lvulas de riego
enum ValveStatus {
  OPEN    /// V√°lvula abierta (agua fluyendo)
  CLOSED  /// V√°lvula cerrada
  PARTIAL /// Parcialmente abierta
  ERROR   /// Error en la v√°lvula
}

/// Nivel de severidad de alertas
enum AlertLevel {
  INFO     /// Informaci√≥n general
  WARNING  /// Advertencia que requiere atenci√≥n
  CRITICAL /// Cr√≠tico, requiere acci√≥n inmediata
  ERROR    /// Error del sistema
}

/// Tipos de alertas del sistema
enum AlertType {
  SENSOR_FAILURE        /// Fallo de sensor IoT
  LOW_BATTERY          /// Bater√≠a baja en nodo
  IRRIGATION_ISSUE     /// Problema en sistema de riego
  WEATHER_ALERT        /// Alerta meteorol√≥gica
  SECURITY_BREACH      /// Brecha de seguridad
  SYSTEM_ERROR         /// Error general del sistema
  MAINTENANCE_REQUIRED /// Mantenimiento requerido
}

/// Canales de notificaci√≥n disponibles
enum NotificationChannel {
  EMAIL    /// Correo electr√≥nico
  SMS      /// Mensaje de texto
  PUSH     /// Notificaci√≥n push m√≥vil
  TELEGRAM /// Bot de Telegram
  SLACK    /// Canal de Slack
  DISCORD  /// Canal de Discord
}

/// Razas de gallinas comunes
enum ChickenBreed {
  LEGHORN          /// Leghorn (alta producci√≥n de huevos)
  RHODE_ISLAND_RED /// Rhode Island Red (doble prop√≥sito)
  PLYMOUTH_ROCK    /// Plymouth Rock (raza d√≥cil)
  SUSSEX           /// Sussex (buena ponedora)
  ORPINGTON        /// Orpington (raza ornamental)
  AUSTRALORP       /// Australorp (excelente ponedora)
  MARANS           /// Marans (huevos oscuros)
  BANTAM           /// Bantam (raza miniatura)
  OTHER            /// Otra raza no especificada
}

/// Estado de salud de las gallinas
enum ChickenStatus {
  HEALTHY    /// Saludable y activa
  SICK       /// Enferma, requiere atenci√≥n
  QUARANTINE /// En cuarentena por enfermedad
  BROODING   /// Empollando huevos
  MOLTING    /// En proceso de muda
  RETIRED    /// Retirada de producci√≥n
  DECEASED   /// Fallecida
}

/// Calidad de los huevos recolectados
enum EggQuality {
  EXCELLENT /// Excelente calidad para venta
  GOOD      /// Buena calidad para consumo
  FAIR      /// Calidad aceptable
  POOR      /// Baja calidad
  CRACKED   /// Huevo agrietado
  DIRTY     /// Huevo sucio
}

/// Estado de las puertas autom√°ticas del gallinero
enum DoorStatus {
  OPEN    /// Puerta abierta
  CLOSED  /// Puerta cerrada
  OPENING /// Abri√©ndose
  CLOSING /// Cerr√°ndose
  ERROR   /// Error en mecanismo
}

/// Modo de operaci√≥n de la automatizaci√≥n
enum AutomationMode {
  MANUAL        /// Control manual exclusivo
  SCHEDULED     /// Basado en horarios programados
  SENSOR_BASED  /// Basado en lecturas de sensores
  AI_CONTROLLED /// Controlado por IA predictiva
}

/// Condiciones meteorol√≥gicas
enum WeatherCondition {
  SUNNY  /// Soleado
  CLOUDY /// Nublado
  RAINY  /// Lluvioso
  STORMY /// Tormenta
  SNOWY  /// Nevando
  FOGGY  /// Niebla
  WINDY  /// Ventoso
}

/// Fuente de energ√≠a del sistema
enum EnergySource {
  SOLAR   /// Energ√≠a solar exclusiva
  BATTERY /// Bater√≠a solamente
  GRID    /// Red el√©ctrica
  HYBRID  /// Sistema h√≠brido (solar + red)
}

/// Estado del sistema IoT
enum SystemStatus {
  ONLINE      /// En l√≠nea y operativo
  OFFLINE     /// Fuera de l√≠nea
  MAINTENANCE /// En mantenimiento
  ERROR       /// Error en el sistema
}

// ================================
// üë• USER MANAGEMENT & MULTI-TENANT
// ================================

/**
 * Usuario del sistema
 * 
 * Representa a una persona que puede acceder al sistema y pertenecer
 * a m√∫ltiples farms con diferentes roles. El sistema es multitenant,
 * permitiendo que un usuario gestione varios huertos/granjas.
 */
model User {
  /// UUID √∫nico del usuario
  id        String   @id @default(uuid())
  /// Nombre de pila
  firstName String?
  /// Apellidos
  lastName  String?
  /// Biograf√≠a o descripci√≥n personal
  bio       String?
  /// URL del avatar/foto de perfil
  avatar    String?
  /// Ubicaci√≥n geogr√°fica del usuario
  location  String?
  /// Zona horaria preferida del usuario
  timezone  String   @default("UTC")
  /// Si el usuario est√° activo en el sistema
  isActive  Boolean  @default(true)
  /// Soft delete: usuario eliminado l√≥gicamente
  isDeleted Boolean  @default(false)
  /// Fecha de creaci√≥n del registro
  createdAt DateTime @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt DateTime @updatedAt
  
  // Relations
  /// Datos de autenticaci√≥n del usuario
  auth            Auth?
  /// Membres√≠as a farms (un usuario puede estar en m√∫ltiples farms)
  farmMemberships FarmMembership[]
  /// Logs de riego realizados por el usuario
  irrigationLogs  IrrigationLog[]
  /// Registros de cosechas realizadas
  harvestLogs     HarvestLog[]
  /// Registros de siembras realizadas
  plantingLogs    PlantingLog[]
  /// Logs de mantenimiento realizados
  maintenanceLogs MaintenanceLog[]
  /// Notificaciones recibidas
  notifications   Notification[]
  /// Interacciones con el asistente IA
  aiInteractions  AIInteraction[]
  /// Alertas creadas por el usuario
  createdAlerts   Alert[]       @relation("AlertCreatedBy")
  /// Alertas asignadas al usuario
  assignedAlerts  Alert[]       @relation("AlertAssignedTo")
  
  @@map("users")
}

/**
 * Datos de autenticaci√≥n del usuario
 * 
 * Almacena credenciales y informaci√≥n de sesi√≥n.
 * Separado del modelo User para mayor seguridad.
 */
model Auth {
  /// UUID √∫nico del registro de autenticaci√≥n
  id         String    @id @default(uuid())
  /// Referencia al usuario (relaci√≥n 1:1)
  userId     String    @unique
  /// Email √∫nico para login
  email      String    @unique
  /// Tel√©fono opcional para 2FA
  phone      String?   @unique
  /// Hash de la contrase√±a (bcrypt)
  password   String?
  /// Si el email ha sido verificado
  isVerified Boolean   @default(false)
  /// √öltimo inicio de sesi√≥n
  lastLogin  DateTime?
  /// Fecha de creaci√≥n
  createdAt  DateTime  @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt  DateTime  @updatedAt
  
  // Relations
  /// Usuario asociado
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("auth")
}

/**
 * Farm/Granja - Entidad principal multitenant
 * 
 * Representa un huerto, granja o explotaci√≥n agr√≠cola.
 * Todos los recursos (plots, sensores, etc.) pertenecen a una farm.
 * Un usuario puede pertenecer a m√∫ltiples farms.
 */
model Farm {
  /// UUID √∫nico de la farm
  id          String   @id @default(uuid())
  /// Nombre de la farm
  name        String
  /// Descripci√≥n opcional
  description String?
  /// Ubicaci√≥n textual (ciudad, regi√≥n)
  location    String?
  /// Direcci√≥n completa estructurada
  address     Json? // { street, city, country, postal_code }
  /// Coordenadas GPS
  coordinates Json? // { lat: number, lng: number }
  /// Zona horaria de la farm
  timezone    String   @default("UTC")
  /// Configuraciones espec√≠ficas de la farm
  settings    Json? // { irrigation_defaults, alert_preferences, etc. }
  /// Si la farm est√° activa
  isActive    Boolean  @default(true)
  /// Fecha de creaci√≥n
  createdAt   DateTime @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt   DateTime @updatedAt
  
  // Relations
  /// Usuarios miembros de la farm
  memberships     FarmMembership[]
  /// Bancales/parcelas de cultivo
  plots           Plot[]
  /// Gallineros de la farm
  coops           Coop[]
  /// Nodos IoT instalados
  iotNodes        IoTNode[]
  /// Zonas de riego configuradas
  irrigationZones IrrigationZone[]
  /// Datos meteorol√≥gicos locales
  weatherData     WeatherData[]
  /// Paneles solares instalados
  solarPanels     SolarPanel[]
  /// Bater√≠as del sistema
  batteries       Battery[]
  /// Alertas generadas en la farm
  alerts          Alert[]
  /// Configuraciones del sistema
  configurations  SystemConfiguration[]
  
  @@map("farms")
}

/**
 * Roles del sistema
 * 
 * Define los diferentes niveles de acceso y permisos
 * que puede tener un usuario dentro de una farm.
 */
model Role {
  /// UUID √∫nico del rol
  id          String   @id @default(uuid())
  /// Nombre del rol (del enum Roles)
  name        Roles    @unique
  /// Descripci√≥n del rol y sus permisos
  description String?
  /// Fecha de creaci√≥n
  createdAt   DateTime @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt   DateTime @updatedAt
  
  // Relations
  /// Membres√≠as que usan este rol
  farmMemberships FarmMembership[]
  
  @@map("roles")
}

/**
 * Membres√≠a de usuario a farm
 * 
 * Tabla de relaci√≥n many-to-many entre User y Farm,
 * con informaci√≥n adicional como el rol del usuario en esa farm.
 * Un usuario puede ser OWNER de una farm y VIEWER de otra.
 */
model FarmMembership {
  /// UUID √∫nico de la membres√≠a
  id        String   @id @default(uuid())
  /// Referencia al usuario
  userId    String
  /// Referencia a la farm
  farmId    String
  /// Referencia al rol del usuario en esta farm
  roleId    String
  /// Si la membres√≠a est√° activa
  isActive  Boolean  @default(true)
  /// Fecha en que se uni√≥ a la farm
  joinedAt  DateTime @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt DateTime @updatedAt
  
  // Relations
  /// Usuario miembro
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// Farm a la que pertenece
  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)
  /// Rol en esta farm
  role Role @relation(fields: [roleId], references: [id])
  
  /// Un usuario solo puede tener una membres√≠a por farm
  @@unique([userId, farmId])
  @@map("farm_memberships")
}

// ================================
// üå± GARDEN MANAGEMENT
// ================================

/**
 * Bancal/Parcela de cultivo
 * 
 * Representa una zona f√≠sica delimitada donde se cultivan plantas.
 * Cada plot pertenece a una farm y puede tener m√∫ltiples cultivos
 * a lo largo del tiempo (rotaci√≥n de cultivos).
 */
model Plot {
  /// UUID √∫nico del bancal
  id          String     @id @default(uuid())
  /// Nombre descriptivo del bancal
  name        String
  /// Descripci√≥n adicional del bancal
  description String?
  /// √Årea en metros cuadrados
  area        Float? 
  /// Ubicaci√≥n y dimensiones del bancal
  location    Json? // { coordinates: [[lat,lng]], dimensions: {length, width} }
  /// Estado actual del bancal
  status      PlotStatus @default(ACTIVE)
  /// Tipo de suelo (arcilloso, arenoso, etc.)
  soilType    String?
  /// Nivel de pH del suelo (0-14)
  soilPh      Float?
  /// Farm a la que pertenece este bancal
  farmId      String
  /// Fecha de creaci√≥n
  createdAt   DateTime   @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt   DateTime   @updatedAt
  
  // Relations
  /// Farm propietaria del bancal
  farm            Farm             @relation(fields: [farmId], references: [id])
  /// Cultivos plantados en este bancal
  crops           Crop[]
  /// Nodos IoT instalados en el bancal
  iotNodes        IoTNode[]
  /// Zonas de riego del bancal
  irrigationZones IrrigationZone[]
  /// Lecturas de sensores en el bancal
  sensorReadings  SensorReading[]
  
  @@map("plots")
}

/**
 * Variedad de cultivo
 * 
 * Cat√°logo de plantas y variedades disponibles para cultivar.
 * Contiene informaci√≥n t√©cnica sobre requerimientos de crecimiento,
 * compatibilidades y caracter√≠sticas de cada variedad.
 */
model CropVariety {
  /// UUID √∫nico de la variedad
  id                String        @id @default(uuid())
  /// Nombre com√∫n de la variedad
  name              String
  /// Nombre cient√≠fico (ej: Solanum lycopersicum)
  scientificName    String?
  /// Categor√≠a del cultivo
  type              CropType
  /// Descripci√≥n detallada de la variedad
  description       String?
  /// Rendimiento promedio en kg por m¬≤
  averageYield      Float?
  /// D√≠as desde siembra hasta cosecha
  daysToMaturity    Int?
  /// Profundidad de siembra en cent√≠metros
  plantingDepth     Float?
  /// Espaciado entre plantas en cent√≠metros
  spacingBetween    Float?
  /// Requerimientos h√≠dricos
  waterRequirements String? // "low", "medium", "high"
  /// Requerimientos de luz solar
  sunRequirements   String? // "full", "partial", "shade"
  /// Temperatura ideal de crecimiento
  idealTemperature  Json? // { min: number, max: number }
  /// Rango de pH ideal del suelo
  idealPh           Json? // { min: number, max: number }
  /// Plantas compatibles para siembra asociada
  compatibleWith    String[]
  /// Plantas incompatibles (evitar cercan√≠a)
  incompatibleWith  String[]
  /// Estaciones ideales para plantaci√≥n
  plantingSeasons   Season[]
  /// Estaciones de cosecha
  harvestSeasons    Season[]
  /// Fecha de creaci√≥n del registro
  createdAt         DateTime      @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt         DateTime      @updatedAt
  
  // Relations
  /// Cultivos que usan esta variedad
  crops Crop[]
  
  @@map("crop_varieties")
}

/**
 * Cultivo activo
 * 
 * Representa una instancia espec√≠fica de un cultivo plantado
 * en un bancal determinado. Incluye fechas, estado actual
 * y seguimiento del ciclo de vida de la plantaci√≥n.
 */
model Crop {
  /// UUID √∫nico del cultivo
  id             String         @id @default(uuid())
  /// Bancal donde est√° plantado
  plotId         String
  /// Variedad de cultivo utilizada
  varietyId      String
  /// Fecha real de plantaci√≥n/siembra
  plantingDate   DateTime?
  /// Fecha estimada de cosecha
  expectedHarvest DateTime?
  /// Fecha real de cosecha completada
  actualHarvest  DateTime?
  /// N√∫mero de plantas o unidades sembradas
  quantity       Int?
  /// Estado actual del cultivo
  status         CropStatus     @default(PLANNED)
  /// M√©todo de plantaci√≥n utilizado
  plantingMethod PlantingMethod
  /// Notas adicionales del agricultor
  notes          String?
  /// Fecha de creaci√≥n del registro
  createdAt      DateTime       @default(now())
  /// Fecha de √∫ltima actualizaci√≥n
  updatedAt      DateTime       @updatedAt
  
  // Relations
  /// Bancal donde est√° plantado
  plot         Plot          @relation(fields: [plotId], references: [id])
  /// Variedad de cultivo
  variety      CropVariety   @relation(fields: [varietyId], references: [id])
  /// Registros de cosechas de este cultivo
  harvestLogs  HarvestLog[]
  /// Registros de plantaci√≥n
  plantingLogs PlantingLog[]
  
  @@map("crops")
}

/**
 * Registro de cosecha
 * 
 * Documenta cada sesi√≥n de cosecha realizada en un cultivo,
 * incluyendo cantidad, calidad y observaciones.
 */
model HarvestLog {
  /// UUID √∫nico del registro de cosecha
  id          String   @id @default(uuid())
  /// Cultivo del que se cosecha
  cropId      String
  /// Usuario que realiz√≥ la cosecha
  userId      String
  /// Cantidad cosechada (kg o unidades)
  quantity    Float
  /// Calidad de la cosecha
  quality     String? // "excellent", "good", "fair", "poor"
  /// Observaciones sobre la cosecha
  notes       String?
  /// Fecha en que se realiz√≥ la cosecha
  harvestDate DateTime @default(now())
  /// Fecha de creaci√≥n del registro
  createdAt   DateTime @default(now())
  
  // Relations
  /// Cultivo cosechado
  crop Crop @relation(fields: [cropId], references: [id])
  /// Usuario que realiz√≥ la cosecha
  user User @relation(fields: [userId], references: [id])
  
  @@map("harvest_logs")
}

/**
 * Registro de plantaci√≥n
 * 
 * Documenta las actividades de siembra y plantaci√≥n
 * realizadas en cada cultivo.
 */
model PlantingLog {
  /// UUID √∫nico del registro de plantaci√≥n
  id           String   @id @default(uuid())
  /// Cultivo al que pertenece la plantaci√≥n
  cropId       String
  /// Usuario que realiz√≥ la plantaci√≥n
  userId       String
  /// Cantidad de plantas/semillas
  quantity     Int
  /// M√©todo de plantaci√≥n empleado
  method       PlantingMethod
  /// Observaciones de la plantaci√≥n
  notes        String?
  /// Fecha en que se realiz√≥ la plantaci√≥n
  plantingDate DateTime @default(now())
  /// Fecha de creaci√≥n del registro
  createdAt    DateTime @default(now())
  
  // Relations
  /// Cultivo plantado
  crop Crop @relation(fields: [cropId], references: [id])
  /// Usuario que realiz√≥ la plantaci√≥n
  user User @relation(fields: [userId], references: [id])
  
  @@map("planting_logs")
}

// ================================
// üêî CHICKEN COOP MANAGEMENT
// ================================
// Gesti√≥n completa de gallineros: aves, producci√≥n de huevos,
// control ambiental y automatizaci√≥n de puertas

model Chicken {
  id          String        @id @default(uuid())
  name        String?
  breed       ChickenBreed
  hatchDate   DateTime?
  acquiredDate DateTime     @default(now())
  status      ChickenStatus @default(HEALTHY)
  color       String?
  weight      Float? // kg
  isLayer     Boolean       @default(true)
  notes       String?
  coopId      String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  coop    Coop?     @relation(fields: [coopId], references: [id])
  eggLogs EggLog[]
  
  @@map("chickens")
}

model Coop {
  id          String      @id @default(uuid())
  name        String
  description String?
  capacity    Int
  location    Json? // coordinates
  dimensions  Json? // length, width, height
  hasRun      Boolean     @default(false)
  runArea     Float? // square meters
  farmId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  farm           Farm            @relation(fields: [farmId], references: [id])
  chickens       Chicken[]
  iotNodes       IoTNode[]
  doors          CoopDoor[]
  sensorReadings SensorReading[]
  
  @@map("coops")
}

model CoopDoor {
  id            String     @id @default(uuid())
  coopId        String
  name          String
  status        DoorStatus @default(CLOSED)
  isAutomatic   Boolean    @default(true)
  openTime      String? // HH:MM format
  closeTime     String? // HH:MM format
  useSunriseSunset Boolean @default(true)
  sunriseOffset Int       @default(0) // minutes
  sunsetOffset  Int       @default(0) // minutes
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relations
  coop     Coop       @relation(fields: [coopId], references: [id])
  doorLogs DoorLog[]
  
  @@map("coop_doors")
}

model DoorLog {
  id        String     @id @default(uuid())
  doorId    String
  status    DoorStatus
  trigger   String // "manual", "scheduled", "sensor", "emergency"
  timestamp DateTime   @default(now())
  
  // Relations
  door CoopDoor @relation(fields: [doorId], references: [id])
  
  @@map("door_logs")
}

model EggLog {
  id        String     @id @default(uuid())
  chickenId String?
  coopId    String? // if chicken is unknown
  quantity  Int        @default(1)
  weight    Float? // grams
  quality   EggQuality @default(GOOD)
  notes     String?
  collectedAt DateTime @default(now())
  createdAt DateTime   @default(now())
  
  // Relations
  chicken Chicken? @relation(fields: [chickenId], references: [id])
  
  @@map("egg_logs")
}

// ================================
// üì° IOT AND SENSOR MANAGEMENT
// ================================
// Red distribuida de nodos IoT con sensores m√∫ltiples,
// comunicaci√≥n mesh y gesti√≥n energ√©tica solar

model IoTNode {
  id             String       @id @default(uuid())
  name           String
  description    String?
  macAddress     String       @unique
  ipAddress      String?
  firmwareVersion String?
  lastHeartbeat  DateTime?
  batteryLevel   Float? // percentage
  signalStrength Float? // RSSI
  status         SystemStatus @default(OFFLINE)
  location       Json? // coordinates
  plotId         String?
  coopId         String?
  farmId         String
  energySource   EnergySource @default(BATTERY)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  farm           Farm            @relation(fields: [farmId], references: [id])
  plot           Plot?           @relation(fields: [plotId], references: [id])
  coop           Coop?           @relation(fields: [coopId], references: [id])
  sensors        Sensor[]
  sensorReadings SensorReading[]
  alerts         Alert[]
  
  @@map("iot_nodes")
}

model Sensor {
  id          String     @id @default(uuid())
  nodeId      String
  type        SensorType
  model       String?
  calibration Json? // calibration parameters
  minValue    Float?
  maxValue    Float?
  unit        String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  node     IoTNode         @relation(fields: [nodeId], references: [id])
  readings SensorReading[]
  
  @@map("sensors")
}

model SensorReading {
  id        String   @id @default(uuid())
  nodeId    String
  sensorId  String
  plotId    String?
  coopId    String?
  value     Float
  unit      String
  quality   Float? // data quality score 0-1
  timestamp DateTime @default(now())
  
  // Relations
  node   IoTNode  @relation(fields: [nodeId], references: [id])
  sensor Sensor   @relation(fields: [sensorId], references: [id])
  plot   Plot?    @relation(fields: [plotId], references: [id])
  coop   Coop?    @relation(fields: [coopId], references: [id])
  
  @@index([nodeId, timestamp])
  @@index([sensorId, timestamp])
  @@map("sensor_readings")
}

// ================================
// üíß IRRIGATION SYSTEM
// ================================
// Sistema de riego inteligente: zonas independientes,
// v√°lvulas automatizadas y programaci√≥n flexible

model IrrigationZone {
  id          String            @id @default(uuid())
  plotId      String
  farmId      String
  name        String
  description String?
  area        Float? // square meters
  flowRate    Float? // liters per minute
  status      IrrigationStatus  @default(INACTIVE)
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relations
  farm            Farm              @relation(fields: [farmId], references: [id])
  plot            Plot              @relation(fields: [plotId], references: [id])
  valves          IrrigationValve[]
  schedules       IrrigationSchedule[]
  logs            IrrigationLog[]
  automationRules AutomationRule[]
  
  @@map("irrigation_zones")
}

model IrrigationValve {
  id        String      @id @default(uuid())
  zoneId    String
  name      String
  pin       Int? // GPIO pin number
  status    ValveStatus @default(CLOSED)
  lastOpened DateTime?
  lastClosed DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  // Relations
  zone IrrigationZone @relation(fields: [zoneId], references: [id])
  
  @@map("irrigation_valves")
}

model IrrigationSchedule {
  id          String   @id @default(uuid())
  zoneId      String
  name        String
  startTime   String // HH:MM format
  duration    Int // minutes
  daysOfWeek  Int[] // 0-6, Sunday=0
  isActive    Boolean  @default(true)
  conditions  Json? // weather conditions to check
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  zone IrrigationZone @relation(fields: [zoneId], references: [id])
  
  @@map("irrigation_schedules")
}

model IrrigationLog {
  id        String            @id @default(uuid())
  zoneId    String
  userId    String?
  startTime DateTime
  endTime   DateTime?
  duration  Int? // actual duration in minutes
  status    IrrigationStatus
  trigger   String // "manual", "scheduled", "sensor", "ai"
  waterUsed Float? // liters
  notes     String?
  createdAt DateTime          @default(now())
  
  // Relations
  zone IrrigationZone @relation(fields: [zoneId], references: [id])
  user User?          @relation(fields: [userId], references: [id])
  
  @@map("irrigation_logs")
}

// ================================
// ü§ñ AUTOMATION SYSTEM
// ================================
// Motor de reglas configurable para automatizaci√≥n completa:
// riego por sensores, horarios y control basado en IA

model AutomationRule {
  id          String         @id @default(uuid())
  name        String
  description String?
  zoneId      String?
  conditions  Json // trigger conditions
  actions     Json // actions to execute
  mode        AutomationMode @default(SENSOR_BASED)
  isActive    Boolean        @default(true)
  priority    Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relations
  zone            IrrigationZone?      @relation(fields: [zoneId], references: [id])
  executionLogs   AutomationExecution[]
  
  @@map("automation_rules")
}

model AutomationExecution {
  id           String   @id @default(uuid())
  ruleId       String
  triggered    Boolean
  conditions   Json // evaluated conditions
  actions      Json // executed actions
  success      Boolean
  errorMessage String?
  executedAt   DateTime @default(now())
  
  // Relations
  rule AutomationRule @relation(fields: [ruleId], references: [id])
  
  @@map("automation_executions")
}

// ================================
// üö® ALERTS AND NOTIFICATIONS
// ================================
// Sistema de alertas en tiempo real y notificaciones
// multi-canal: email, SMS, Telegram, Slack, Discord

model Alert {
  id          String     @id @default(uuid())
  farmId      String
  nodeId      String?
  type        AlertType
  level       AlertLevel
  title       String
  message     String
  isRead      Boolean    @default(false)
  isResolved  Boolean    @default(false)
  createdById String?
  assignedToId String?
  resolvedAt  DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  farm       Farm     @relation(fields: [farmId], references: [id])
  node       IoTNode? @relation(fields: [nodeId], references: [id])
  createdBy  User?    @relation("AlertCreatedBy", fields: [createdById], references: [id])
  assignedTo User?    @relation("AlertAssignedTo", fields: [assignedToId], references: [id])
  
  @@map("alerts")
}

model Notification {
  id        String              @id @default(uuid())
  userId    String
  channel   NotificationChannel
  title     String
  message   String
  data      Json? // additional payload
  sent      Boolean             @default(false)
  sentAt    DateTime?
  read      Boolean             @default(false)
  readAt    DateTime?
  createdAt DateTime            @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id])
  
  @@map("notifications")
}

// ================================
// üå§Ô∏è WEATHER AND ENVIRONMENTAL DATA
// ================================
// Estaci√≥n meteorol√≥gica local integrada con APIs externas
// (OpenWeather, AEMET) para decisiones agr√≠colas inteligentes

model WeatherData {
  id           String           @id @default(uuid())
  farmId       String
  location     String
  temperature  Float
  humidity     Float
  pressure     Float
  windSpeed    Float?
  windDirection Float?
  rainfall     Float?
  uv          Float?
  condition    WeatherCondition
  forecast     Json? // extended forecast data
  source       String // "local", "openweather", "aemet"
  timestamp    DateTime         @default(now())
  
  // Relations
  farm Farm @relation(fields: [farmId], references: [id])
  
  @@index([farmId, timestamp])
  @@index([location, timestamp])
  @@map("weather_data")
}

// ================================
// üîã ENERGY MANAGEMENT
// ================================
// Gesti√≥n energ√©tica sostenible: paneles solares, bater√≠as
// y optimizaci√≥n autom√°tica del consumo por IA

model SolarPanel {
  id           String    @id @default(uuid())
  farmId       String
  nodeId       String?
  name         String
  capacity     Float // watts
  efficiency   Float? // percentage
  tiltAngle    Float?
  azimuthAngle Float?
  installDate  DateTime?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  farm       Farm        @relation(fields: [farmId], references: [id])
  energyLogs EnergyLog[]
  
  @@map("solar_panels")
}

model Battery {
  id           String    @id @default(uuid())
  farmId       String
  nodeId       String?
  name         String
  capacity     Float // amp-hours
  voltage      Float // volts
  chemistry    String? // "LiPo", "Li-ion", "Lead-acid"
  cycleCount   Int       @default(0)
  healthStatus Float?    @default(100) // percentage
  installDate  DateTime?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  farm       Farm        @relation(fields: [farmId], references: [id])
  energyLogs EnergyLog[]
  
  @@map("batteries")
}

model EnergyLog {
  id              String       @id @default(uuid())
  solarPanelId    String?
  batteryId       String?
  generated       Float? // watts generated (solar)
  consumed        Float? // watts consumed
  stored          Float? // watts stored (battery)
  batteryLevel    Float? // percentage
  batteryVoltage  Float? // volts
  batteryCurrent  Float? // amps
  gridConsumption Float? // watts from grid
  efficiency      Float? // system efficiency percentage
  timestamp       DateTime     @default(now())
  
  // Relations
  solarPanel SolarPanel? @relation(fields: [solarPanelId], references: [id])
  battery    Battery?    @relation(fields: [batteryId], references: [id])
  
  @@index([timestamp])
  @@map("energy_logs")
}

// ================================
// üß† ANALYTICS AND AI
// ================================
// Motor de inteligencia artificial: predicciones de rendimiento,
// asistente conversacional y an√°lisis predictivo avanzado

model Prediction {
  id          String   @id @default(uuid())
  type        String // "yield", "irrigation", "weather", "pest"
  target      String // what is being predicted
  targetId    String? // ID of the target entity
  model       String // AI model used
  confidence  Float // 0-1
  prediction  Json // prediction data
  actualValue Json? // actual outcome for training
  validUntil  DateTime?
  createdAt   DateTime @default(now())
  
  @@index([type, targetId])
  @@map("predictions")
}

model AIInteraction {
  id        String   @id @default(uuid())
  userId    String
  query     String
  response  String
  context   Json? // conversation context
  feedback  Int? // user rating 1-5
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id])
  
  @@map("ai_interactions")
}

model AnalyticsReport {
  id         String   @id @default(uuid())
  name       String
  type       String // "yield", "efficiency", "consumption"
  period     String // "daily", "weekly", "monthly", "yearly"
  data       Json // report data
  generatedAt DateTime @default(now())
  
  @@map("analytics_reports")
}

// ================================
// üîß MAINTENANCE AND SYSTEM LOGS
// ================================
// Seguimiento de mantenimiento preventivo y logs del sistema
// para monitoreo completo y diagn√≥stico de problemas

model MaintenanceLog {
  id          String   @id @default(uuid())
  userId      String
  nodeId      String?
  type        String // "cleaning", "calibration", "repair", "replacement"
  description String
  cost        Float?
  nextDue     DateTime?
  completedAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id])
  
  @@map("maintenance_logs")
}

model SystemLog {
  id        String   @id @default(uuid())
  level     String // "info", "warning", "error", "debug"
  component String // "backend", "node", "sensor", "irrigation"
  message   String
  data      Json?
  timestamp DateTime @default(now())
  
  @@index([level, timestamp])
  @@index([component, timestamp])
  @@map("system_logs")
}

// ================================
// ‚öôÔ∏è CONFIGURATIONS
// ================================
// Configuraciones del sistema por farm: umbrales de sensores,
// preferencias de alertas y par√°metros de automatizaci√≥n

model SystemConfiguration {
  id        String   @id @default(uuid())
  farmId    String
  key       String
  value     Json
  category  String // "irrigation", "alerts", "energy", "ai"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  farm Farm @relation(fields: [farmId], references: [id])
  
  @@unique([farmId, key])
  @@map("system_configurations")
}

/**
 * ===================================================================
 * üìä SCHEMA SUMMARY
 * ===================================================================
 * 
 * MODELS TOTAL: 30+
 * ENUMS: 12 categor√≠as con 90+ valores
 * 
 * KEY FEATURES:
 * ‚úÖ Multi-tenant architecture (Farm-based)
 * ‚úÖ IoT ready with sensor networks
 * ‚úÖ Automated irrigation with smart rules
 * ‚úÖ Solar energy management
 * ‚úÖ AI predictions and analytics
 * ‚úÖ Real-time alerts and notifications
 * ‚úÖ Comprehensive audit trails
 * ‚úÖ Optimized indexes for performance
 * 
 * RELATIONSHIPS:
 * - User ‚Üí FarmMembership ‚Üí Farm (many-to-many with roles)
 * - Farm ‚Üí Plots ‚Üí Crops (hierarchical structure)
 * - IoTNode ‚Üí Sensors ‚Üí SensorReadings (telemetry data)
 * - IrrigationZone ‚Üí AutomationRules (smart control)
 * - Farm ‚Üí SolarPanel/Battery ‚Üí EnergyLog (sustainability)
 * 
 * ===================================================================
 */